%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: instr.pdf
%%Creator: Adobe Acrobat 10.0.0
%%For: yujin
%%CreationDate: 2019/8/19, 11:52:13
%%BoundingBox: 0 0 398 256
%%HiResBoundingBox: 0 0 397.8613 255.0853
%%CropBox: 0 0 397.8613 255.0853
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1068 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Microsoft® PowerPoint® for Office 365"
   dc:format="application/pdf"
   xmp:CreatorTool="Microsoft® PowerPoint® for Office 365"
   xmp:CreateDate="2019-08-19T11:51:41+08:00"
   xmp:ModifyDate="2019-08-19T11:51:41+08:00"
   xmpMM:DocumentID="uuid:3FE89C6D-BF8F-4BCE-9EB6-E00D8A58B539"
   xmpMM:InstanceID="uuid:3FE89C6D-BF8F-4BCE-9EB6-E00D8A58B539">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">FPGA 中断以多任务执行</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Yu Jincheng</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -255.085 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 255.085 li
397.861 255.085 li
397.861 0 li
cp
clp
gsave
-.00183105 256.056 mo
397.998 256.056 li
397.998 -.943695 li
-.00183105 -.943695 li
cp
clp
-503.002 344.056 mo
456.998 344.056 li
456.998 -195.944 li
-503.002 -195.944 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
203.228 27.5863 mo
203.228 17.8463 211.128 9.94632 220.868 9.94632 cv
291.428 9.94632 li
301.168 9.94632 309.068 17.8463 309.068 27.5863 cv
309.068 160.066 li
309.068 169.806 301.168 177.706 291.428 177.706 cv
220.868 177.706 li
211.128 177.706 203.228 169.806 203.228 160.066 cv
cp
1 /0 /CSD get_res sepcs
.149 sep
ef
1.02 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
203.228 27.5863 mo
203.228 17.8463 211.128 9.94632 220.868 9.94632 cv
291.428 9.94632 li
301.168 9.94632 309.068 17.8463 309.068 27.5863 cv
309.068 160.066 li
309.068 169.806 301.168 177.706 291.428 177.706 cv
220.868 177.706 li
211.128 177.706 203.228 169.806 203.228 160.066 cv
cp
/1 
[/DeviceCMYK] /CSA add_res
.923095 .755032 .159182 .0290837 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: UKGMLZ+DengXian-Light-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (UKGMLZ+DengXian-Light-GBK-EUC-H)
%%Title: (UKGMLZ+DengXian-Light-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /UKGMLZ+DengXian-Light-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-145 -253 1151 937} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 29235 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 11 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
19963 <001C60D8A8C9B5EE310D7D328C26C57A3D9BF7A0E6A0E76A3BACA7106
71887A855A61F3344080ABE2B9AE45410A494B27E5A3789075E9B8E5260A45AE
CED65E7BB618B46A784EF2E859B6BE858FE6001DF5350782C5114FDF19F7B0A0
858890305489C9D1EA497878016D2F319758DEAD6E4B163A8D147A6D30097F53
55EF80D280B6BA10AD2B1932C7E227F1E7921D771B430FC91E0C4D27BA242F20
7FD90C29ED7A932FC861F7124AF9842B1F85A2D51571D7D8CA6064FC9F29EA19
A3E017E99A1B3DAC63506DDA90B1ADBF0D4EC30329F5CA144E20C4FD66A5DC3B
F6C73F173AF4E54547D65846772DC002FF6A92A3B34E3DC0B2FBF7255BC85DB7
3A7E93B03767ED71491AE12FFAED52E45D1C3EE175864FEE3B020506BFDE6D26
50A36624D1006D44DCC27A48CE521758C1259B2ADE3996B7A345116E9BFE0B33
488B1CE500CFA2606395A8EABD8B5733438D5B381EDEFE5FEC61C6A895697A10
A7F2322E09FC002F588A73E6220481B046C726B18446D71E3DB261F6D9A13405
06B0BBA8FED3AD06E5A19C16975433721DB133E4A6CED8F728B61B1DD1493FD6
BC8E3B17EE5F2D9AE684F945CDA9161440CEA793C6D4A36B5AB4A07491CCBCA7
5D14CD98C39C6678A6F83BDBE25B1A9F5010DAF9D> |
7433 <001C60D8A8C9B5EE310D17C7B0108D6575B0725BB35237D89613CD76DB
859A70BCF96779CC3436E33D4E875DEEE6FF1ABEEB9FCAFE483EF3961964A814
02165AC5B401908B9FC0F3545D5C2A14C895274DB500989A10553E2361CE93E3
BDDCD0B6EEA781EC571E> |
12607 <001C60D8A8C9B5EE312336DE09BD27ADB35357116559001137FF36301
A10837DA1B1B73AEE3B2C4BC0F415CB7DAB4505FD5D66A6743BB95A14E24A405
74312425A17CE2EF84B209D34454FDB4822186F64A3A76F65ADFDFC472150148
2FA6F2B92412450BDE23DA180E09691D58E2E98238CA5B5BFD89264B657D9C1D
C493BB28A7CAFC319DE6EB62EBE9837B912384B05E14D376E0A697D2C3C1DF49
B047F7188901D8A3F2FEA634FBD30D3449DF71BF378B413CE4E8AFFB932791D8
49A1FA66001A69B5F1B815831AA96DF1A42C15ABEC8D0C3BA992B050EC761535
2D877E825CFC2F2C90042DCE8874AE3A75320E691A479B788919614AFF8C0355
18C5183B70339AEF695D78FA06977B1E4B30D262104846CB815BF5673A178CFF
8946A9F05587889A10EBFE77E52EBACF109437F15E9996074F9668AD886D021E
9D614FED9F145C5580ED8EB5092> |
24303 <001C60D8A8C9B5EE310D43FE924100DF7BB438477912BFEC3463B386B
BCE9F7F5FB4F33A853FF86CA68E3EAF4AE932E5B9252AD4D4E83496BA673EC18
CF31870C63F87ABB336E1B79DD4012D552B9C1934407EB512EC9E696B1641686
FE49C5856CB3415F2784A3FB65C098BB92107FE51E70E35C30F830129CF425AC
72EE5B60E738402B4C0C15B760844DE32518760ABDD08C5FE728344D956B0D79
380B637555BD072238AA07DB9911C1DD4227D0EFD466FD4EC87F190650BBC1E3
7A95E8126CCB65C704ECDC119B75A01C14E728EC66EECC7FEC01C369A9110D06
B3ED1687C3FB2F0D706D6FC0CE4EF3112D9F720738C3069733302AA1BF6C5F22
0C1DC783A7FC4A0A77C3F6ECED09C3547ED2273FE94D223CE44ED7399E6AD970
ABC26ADE1431018C10B235DD064A63CB774F5EB7993E1031E499A9B84E8A0EC7
2A94BC1EE7DC8796D5B37C3B8> |
28449 <001C60D8A8C9B5EE310D76DEFAEEA48D7B7D809C6542E3CF07618C57E
E1250DCEED1C9C3BAF66F60E64EBEE5B5711FFA570431DC814A3927EB8B32D08
F7238AB8E90269665D4FFBC3138323011305C090F29962312DF88166681781E5
5DA8A0EFC356126A8D48733DB00CC5663BE5D2FACD9AF84372014ECBACB82EA9
2A03D1FC7EEF3CF> |
18283 <001C60D8A8C9B5EE310DBF302D9225C2F956919348C918EFDD03A40B3
D9101B7D01B685F54E042BBA1EE738D3A47FC2CD4C5426432991334E9B09BC78
C459ABEBB2FEC8DAFE59895FD86D0B8FA39461B27915834C51972C26E42D0E15
D79F5799E792DF6021B34301BF59D78F548463FFEF7D93E2FE1A0C83C6A92B0A
86F47A10F8B0E893ED5CF5995DA6717896DDBF2824C4035B222C8D28A4215E5C
A3629044A2CABBB7BC8BB2CD933C6F3C0D9CC235492B1D9696BAF2EA64CCFFD1
30095D03464AFA55026EEE82FA303EB7BB0C16CB44D8740F235AA399F487B131
6157A928C0FCA4F10B92E4775951F83685D70D126BEA2BD2DB00A550676547EE
9B1874BF5EF95C97A99BD0B29C0F35BB815C0AF2BEA04C49B3196F4164306155
90F65A413CD12A9E67C2DD78B8EE7F0A935009C6B900DD116DFA3BEAA37E7876
A85DC6F10E901C5034C988DF068D9FE1340B51C6F21256816C058266F5D7D1C0
154B7192EF985BDFBB630D26EA7D203C20C7535DFF087F6C86F9FB12D4C01D3F
BA98C1FFE583D74221817178E74E355CDA98F798E7D82050D72E8E08340CF983
A0E96E53CA0024486301537460B> |
7669 <001C60D8A8C9B5EE3129546E45E2678A1F16482AA7FB22CE0B287FF928
7D4F493DB023378C1821C1E468F89119C3174AA721A1E17E407808EB285FDE5C
DF4E7A650D09D296B7B2EFE118B8AA294FDFA14ECE925BC4108E0F4FFF6B480C
C1E0D38191E528AB8B3EF4E29632F202F6BAE78E360D111487301B9A568F4554
3BB955026D64B92546CBCAEAF40D2E065759BAF4E6AC5E666C8A208081E4ADF2
AA7F2A9EEDA764D1C089AD51DD2544EEA9DC9EA61AF64FFCBBB374F9D2D2F000
822C53A89812C9A0988EFD5288839222A93F1DB9163660FACF6C58CF8AA6D1C5
CED0F73651F29AF9D47D955F705D3E3049178306DFB88EF6038B2A044941> |
26111 <001C60D8A8C9B5EE31030C529A12BB293552EC36315E9367558405DB8
BDAFF09E2C643153F1A8BCBA5F776FEA78B76E989F154E025CF8B59782C75CD8
E49368EDECDAF2CA0BEBEC090D452F0217150F8DC4626C8068597972C79E9B3E
532D1291DFF142AF6C39E1D4D91E0F8C88AE9932D684AC3B9920745356C47286
3EA023B18FC0894A00AA5C9CC06070DAB7F31CCECCAFEAC71B677285735D4167
3C726172AC795E981B3205DEC2CA75D441BFCA5715592BA3139EB92910828A6B
340D5220406DF8E885645805ED0D1D41AF35E18F0F1061A1E9DF9A9CD9F24A6B
9FF933789CE54768C336927258F5757417AD7B47AB9D6CCC9C69235F49D9DC79
392C602929C99D24C40305C6C55322E6FA78CF0C4A497146B1FDBA59FCBDDBE0
CA8A9846D7F2F752354897BC74CE764508F172B0930910D80AC94CA63249B29B
13CE1087872069C7A2926D1A096E86C8EBF2D639C85B7298E3880240C2DC3BE5
BBF9B2CAD38C57E3179EF10790FC7DF57A96D80FA746AB78BE01EE397E7641F8
C3FE8973C9F419933601A849976A793C3C0DEBE956206E2B46F08B2176828EA7
C15FF1E57EAAAF5C1137BADEAE60AB11AE4731AD7C5E2A63E54E685763F059C1
94FCEC1930B7B8297ED984188CB5F6BCC0B94D41DD74FAD829F7E898E3D59FD9
49C3A7B2508EB15C77DEED4365B82CCB30E81BC80B82F4DAB8178503CA344A64
E15DE9DAA1FC74C278397343D4CC3F8F9BAE5DB4D2340759B42EA957E96ACC7F
0CC845AF6C86F0B08BD> |
22656 <001C60D8A8C9B5EE3147234ACDD6CEC57FB2A5BDE2C438859DB895490
DEEC180E51200C37F3198EC5E3A839352B29B23EBB6C50197C0BC61384DF3E4D
272F3498490B3D6E83A1F0D46257D2BC5771781DAC96988522CE5672DACCCFAC
455E9D92CC6B82199030BA7B1EBFD27C139C376A27CE0AD9E1A05E91E23CC56F
457D8DB71C6A097587BAECCF316D77C8810F9691CD9EB6C03E168D60E80B37A8
48F3ABD82B1939431D20FD0E8FF0F19A87DE1B8846AEF1AEB64DF7ADE13C3BFF
8CB6CDB6E2D594614281CA03462A22A56372FE3840074671CB680F430C2E680E
C35339D878E892EE288870175CE615DA03E571AA00791F2685C62968C56910FB
C8F5A6F48DB60DD6196CA4D5A40DB12F7662F974F331904E77AC9523A31CDABC
00AE77EDC9F04372B40AC57439D71118F374FB4BCF6E6D056DFA4CC921C71E01
918CECAB2EEC4386604FF4A8CEFE2A5006F38EE5268A4F447908AE64524C5973
1BB6C99DB9A6AEE65F769F2736442189BA3C2E35ADBC2> |
9767 <001C60D8A8C9B5EE311311179D2810522371EC9072C6BA5AE537CB4386
B25AA1B80CA9262743838B5024AA2E82EF33A71EE83F738685A61D95BB7650D8
CE95F92BAF87342143A5CF675E1202DD1B9113376B81B5C4647DBD51A3EA034B
157E5EF851C32FDF0C9752309C60BA3385912D2139B7639569C80EAF2DEF5AF7
62311BDFE35DF32730A2EC5416551D987C7AA163321ADE544A514095DCA5F8A7
102F28213953D62BBFFA75BD85E4AFE865140C755472810C9B1535D5A6D6F517
68FC987C3192158EC44D38DD140B8085772B0F732D69A2818CE6FCB1A4E47981
6745CF20667E926AC9A186D72B524A6F5F147A3CA77FE472277F825307B30EFA
74C749C1EB03BEA1> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /UKGMLZ+DengXian-Light-GBK-EUC-H-Identity-H /Identity-H 0 [/UKGMLZ+DengXian-Light-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/UKGMLZ+DengXian-Light-GBK-EUC-H-Identity-H findfont [19.98 0 0 -19.98 0 0 ]msf
-460.402 -133.964 mo
(M\373\035\0111?^\357o!Gk\035\365e\377X\200&')sh
%ADOBeginSubsetFont: UKGMLZ+DengXian-Light-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/UKGMLZ+DengXian-Light-GBK-EUC-H 2 GetGlyphDirectory
12806 <001C60D8A8C9B5EE310D9B0541A71B2B11AAE16CBA7959C7A2D8C82F4
642CCFB8E64CC49D4F909A6D7D808651408D08C0F51AAF61E8BB120610FC39BA
DADE5BF16A841E789C14D6720403C215B934CEE0780D43E5A63C298F1C4F3323
7C7BCAC2FC3B82DAE658AF81F17A88E6F5056F34819E2B084D1E4B8FE48DD142
B17FB9F6E36DC897F856B6BB988C4C8367A9F7E411E85822D390D7578BCD882C
395C8FEFCA180A3EF9C36D17525991DC52738BDF587FDC72CCE89818C61FFE1F
4A21C164D77AFF7A7E19C3EF3B354C30E52153F05CE912EB1742D7E14865D50E
3299B19CA922F84AEA264B45DA30C074E03604E3A06D4FB83D732A71B3F4710A
E9BCCB9EBBCAF2473E3F502B88D702460B932A4C595E3EF2215D0F6F86476766
D999670C437AC15E32C1593CA6BB836581ECE1ECD729B3B0420C30BAE5863B4A
CAB08CC12B8D07E208E0BC63827055B8DD0497DE47E362E0834FB1251280511E
2F71915EEE16C12EE23AC052C622DF8943F901BC8B23750DFB1A60390060E95F
FC4D0AE72638EE373E095EB213984FD95401B23426656F01DB017DFEBFC4FCC4
BDAD470BC9E9FFFD26A9FAFB3331013FB> |
7651 <001C60D8A8C9B5EE312A8544284194899A4E38CC8D2E175508C60E13A5
4DD9EA97CE50953FAC9A2D0FBF5EE7B7644DA7C163AD38BC836F560E72F38786
7764CF12613FB18C492E2F198DA01A43D73F48EFBF3FDD12BC23FBF3EBBB6805
08F8F781811250717CCCEA1E66D10D4EFB3DEDA39AA803F554E2CF5C2D1B9E60
A4236C4D65512D6954BE34A1945133BAD33CFB8B5566575C361CE1D44595E97A
4E1FE23CB65828DAEDA25F614F7A872DA695ECA701B9011916774EC8467A1952
5678A2E20576> |
!
end
end end
%ADOEndSubsetFont
/UKGMLZ+DengXian-Light-GBK-EUC-H-Identity-H findfont [19.98 0 0 -19.98 0 0 ]msf
-254.882 -133.964 mo
(2\006\035\343)
[19.98 0 ]xsh
%ADOBeginSubsetFont: UKGMMA+DengXian-Light-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (UKGMMA+DengXian-Light-GBK-EUC-H)
%%Title: (UKGMMA+DengXian-Light-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /UKGMMA+DengXian-Light-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-145 -253 1151 937} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 29235 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 7 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
28631 <001C60D8A8C9B6571931EBAE100B7B82A3A1C32954DAD7370F9EFFAA2
F70F8D9A2A41059C277DF20BD54DBF64EFB34450A8D5A0C8E3ACAB5D1E41D059
DF59085FCB5657341DD31AC9116BEC884818E2168305762E0356374C33A3709F
01050EDDC951D474013E4EC63F4F2CED44532> |
28664 <001C60D8A8C9B7A22517BFFD72658E63C0537C1A0AC2931B19B5CE535
75B1AC0C6ACDADD253FA15C54C02BCCC2FCC454E303DF8C35F5EBD1CB7D51933
1E74DD801D6C928DA8C23EFB1C58536D9B30E817CE92A6BBCE1DCE6B3204EFFC
A976D3692576CE82D5693E5C934F20297FB8EB98A2D3ADD22886DBDB9F95B097
8C0FFAC42D0208B3575D0> |
28662 <001C60D8A8C9B77FE2D7FBB81E0B3022E302E4E46DFE76CAA6E3CF13B
F52C7A776BA53623DE8CFA260DCD3CBD4F28D25568ADA702B490DB591519B43D
EF5BFD8312AB24828B8AFA961DDDB26330F644E3AE2CFC6354642BEF5C5066C7
5F8DCDE5AB09A63B367C2DD5372E66B29EE1B6EDC72FDE9> |
28674 <001C60D8A8C9B7EA3AB46B403126933B55ADE859191CA037606579A58
DD74A3ABB39386EF842DF170C02F0211257D0255B84D86ED699DDA9A4AE6137D
568938B37ACC3781C72A3851B059EF9EF7E20465445DB745B490660A4643A885
DF0E0DDB62237235D629520CF04628494717EA5AEBF3D1835DD8AB060D2C70F1
263AD23740A2CC7B6> |
28663 <001C60D8A8C9B7EB086D7C5A7B1C89E7033D41B279E2163CE71F6B61A
5D2BC57A05DFDDFF4BFF36B774EE39AA200B8294FA0F7E1B51736C8E11783C29
C84FD6AEF058A317313539BDEE8A93FFBDE1C4414C6F88E8B7B430106985D1C7
7B3F98B49B334B0A737435720D0CAAB0F5C2587BE84A23116D3AEF111DBE19BF
9866E1660CD619232B604054961106EEA6E89C829C595F829085E74E21A70A83
42A6A5707E59DE1D8CD5D45BF8184> |
28677 <001C60D8A8C9B820E2DEE5AD55660E5E4763E494D6FC6DA741418C950
8F00510CCC182D928BBFDB413AB356BFD03A2B6FB5EAB682AA37C76E9DB54801
F944F70AC90A65ACDB3F0F6AFE762E37AB678B43BD111FBC032DA11B36A> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /UKGMMA+DengXian-Light-GBK-EUC-H-Identity-H /Identity-H 0 [/UKGMMA+DengXian-Light-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/UKGMMA+DengXian-Light-GBK-EUC-H-Identity-H findfont [19.98 0 0 -19.98 0 0 ]msf
-214.922 -133.964 mo
(o\327o\370o\366p\002o\367o\370p\005)
[13.4664 10.09 8.87112 11.2089 11.1888 10.09 0 ]xsh
%ADOBeginSubsetFont: UKGMLZ+DengXian-Light-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/UKGMLZ+DengXian-Light-GBK-EUC-H 6 GetGlyphDirectory
7498 <001C60D8A8C9B5EE31037843CDA2CE6343527DF19EA7EF26B568B486FE
08EECA03FB898082C4CF3E9E69CBAA83F0F15DB02147250AB524F67DD5C52B51
B8547D2BDEE074272BD40C9E34A70C0FFF7E42EFE492E8AF5C5D0FDA79265022
5D6C9FEDB207B5617B9114EFBD7C739EFB5F22DE2A1F9653FF11D9E35EDCA99E
4B0A8FD2EAAAEFF6120435C362B06A8A9DB443D4582FDA23C8D595C37F7CC755
2A8C4217F6C3FC3C0D76164C7DC5C1BA6A74252E8246B2C31B99723967633252
684EC7B8E9A1F9B26DDE1EEC3EC723EA4C28> |
8524 <001C60D8A8C9B5EE3145CF6FE69006A539EC77D44A882E4C08D4C06120
E1D5832113870501C7AD49895F1BB60D3ED3847F33FB3392BB8669477EB7B900
17DE3F89E28F7ADD43918E8E936752C38337E0C1FF1E66AC719CDC315EE51ED1
A25EDE1086533DCA12141D76482A533D478517758080B4C844B2C0D6543DF6F9
F0F93F110E12A6F592F40F6AAD347D704AFFD847A6D6710B35DAFA1BEC37587D
8C20952A96D2B69F938DC391063D22C73C6329537867F3D031291BDD9BBE81EB
97FCF83CC9E39BACF637B7C791B3DB058BAD774FF5902B0C263410B3B25AF7E0
406833C665FC78E2AF1BF59B5DB3B975116260B54735BF722A46689448CE97E9
43E64AE6526BD311294E0625CF7A34B58D5336C966A75C7E511107728AF3FD6A
CA485343E83C146069D0714AB6A5CFB34583CD19FCBE56874FA134DC10D25687
BD1E6228E88E17FDB357280E8CCE890BC2D1DB1B6EB0A1CDC44C65ECA535A69F
74D66A31B51D1B5C7DFD33BF8769BFE084053897721A5C> |
15610 <001C60D8A8C9B5EE310D5D0A8BB8AC5484C5AD5EFDF486B238DEEBA8A
C40A2E3F0ABADA47DF65C5976A0AAC47A9E44FEA46A66A97D72781E076CD215C
D6E52B64F8F1AF3ABC546CAC5254F1C0920465240FBEC6028EBE4B6C04A91043
201647C4267E192811F47DA1F378CF2D4A6E47F4A1BCA247A7A25CD5587F3452
D3622A5DC5C99572E46DB1494AD110DD51C3D8A49A97345E8C8237BF442D4333
8D148D9BD4ADC68BCEB094D992A4930E9576E3AB5E0B96A48B96182E1A762A2C
F126F3A3B8441A571E397B3F5679CED0E08564680A1A05F97F49F4481BD55999
3B425E2A3EADCDF5DD22E2FCFF35E331D3F8BEA56677FC4E7CCCD9CB6A26684E
8C88E25E8EBE5A24CACCD93D48A03135EB1324AF2935D1819F6F885AA50C7EEC
0E64677D0140CCF3558923B53E9F103F6804952DEC1C0832EF3C753E55DB1DF5
932301A4C7EDA9116EC11A676BFB373788E19B270260CB8AD963D826BA5F4198
65B6E4EF098DFB8EE363A9914B03F3E574AEC34EFB72D9916455F7EAEAADC995
239BE22E59C42338A18EA37220C6ED1244A84E5EC> |
8607 <001C60D8A8C9B5EE310A5FDEFC501C6E2D7B1FE81B583094168C2D80CE
F3D9C8754906DAD900DE914CA62116CCEAEB6F3714F7B5FCD0859FD8DD6AF710
ECBE2683E95EFCD41C8A695E21924299446C38FADC1DDF04292E8E2DC0D70472
5BF305ACD0611BBA6749BC01B724FD8605999112BBDE02F60F9228BF1D654EA4
0B80FABDFA310A150B7F3CA454D1E6273ACFDBB874465B3426B114731B5069BC
F31A2EA2B5C8272CC5C0D25220C7B470879CDFA231F56889685224D3C347E5CC
3DE7CADF29C92F5E42A941E45F77C66406FD74E79A80E883B210B8F7BB435EF6
F0D4B28D01347A97AA4CB06D5EF31AFFF430B86D8528FA7837A4BCEECF9BED4D
40D4E46EA36E0DFA45CD4128> |
7423 <001C60D8A8C9B5EE310D00F7AF8F436C11B2063C7C4656E2EECC3C0014
BF89CEBC617C074E8695C0C4875D164AC796B77380DFD2E825> |
7465 <001C60D8A8C9B5EE311A7C07C1C0DA32787541B4444304CC3539CA2AEA
72CBACF62DCCB6CCBBDF4EEC8CD722175BD119C2950C2C74EED4023793845B54
E072245F2113E35352F46997A646F50691B22EB6D175F19598AA821807ADD265
F8A7CB854E6806490B61DB5A74A9F2BB1006F6AEB88ED8894498E7FE654B677E
42D14EBF> |
!
end
end end
%ADOEndSubsetFont
/UKGMLZ+DengXian-Light-GBK-EUC-H-Identity-H findfont [19.98 0 0 -19.98 0 0 ]msf
-143.402 -133.964 mo
(\035J!L<\372!\237\034\377\035\))
[19.98 20.0599 19.98 19.98 20.08 0 ]xsh
%ADOBeginSubsetFont: UKGMMA+DengXian-Light-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/UKGMMA+DengXian-Light-GBK-EUC-H 12 GetGlyphDirectory
28636 <001C60D8A8C9B888C1BFA16910ADC46CE8E704FB8D7774> |
28673 <001C60D8A8C9B784FA6074537B110AE32601EA16ECFB7CBB43F107507
B11C4A3DC7FC620D51135084C7F96904DEEEA565D36ED04D37DB4A0002660B4D
F0D4657B54A869CD29F998F98051223600952F029C15326B1B7545EDBE23D637
D174D258479C677F4FDBF75BF2E4B27C270> |
28678 <001C60D8A8C9B737EC2B57A5642D556FA608C93A259D0207705A0D64E
3214B366F04101735CA1AE3DD8254AB5C1085C1D02DD31AD6CEE7D6C470D03F3
2881D1B4EC227839F1CC5D0E47EB4026D2884EA1E6DDA1AAF1E46212B578B8E1
B1F48EA7AC80EF88F96DCEA9F995E6DD0452607FD1E55DEB653F24595BA352A1
32FBE66865D217C213BC582874A753728947833EF56994AF7254C395C02CDE2D
94DE5BC17204A8537A3F7160ECBD4AEBCD29FFB9B2EF6C7986F944C2BF78EADB
E22B06988DDC47FAA5666BA46A3DDF4BE6AFF230E243D4E912AA9EDD1B283561
63CA2F859799A58B1D75D97> |
28679 <001C60D8A8C9B84325280CC94C07830E8D42F3FD5417EDDAE109DC0C3
2F7331AF641636727903FACB6C55C563B9356148DF54391ED9670D082BFEB9E7
4924D553C05BED9B86BC702FB935241BDB310455E2E99B56AF62A54123688D7D
DE474> |
28680 <001C60D8A8C9B784FA4FA7485FA3CB806FFC559E97A9A527FE7BDAA7C
F5C2E8EDDE0645D993432C8AB8CA61AB489B4AD1A859D5E312278729A7D4D6A0
5A362EBAF5225DC463C0CDF5924591F146DC4F7B5944207D549A1BC4CB6A2066
E1F3E367A1EE39E77BD396601560E8B2996> |
28668 <001C60D8A8C9B89F5AEEE85C8DDC991ABD9B28CD2FFC812D97FBE1C22
328723E822866> |
28595 <001C60D8A8C9B8581AA5> |
28628 <001C60D8A8C9B668C4151E41233CE4B2E6D62BCF287A68DD095C05ED3
F3F5E69351E9BCE527B9FE04A3A5216384F282FFE304517D694E59BAADC0878B
DD64DDC689813E5B6E853796369ADED853D1FC211F8> |
28660 <001C60D8A8C9B7AD0A3B3BC2AF339D766B873C76810CB7061D4F19C96
6230D35095E6F8EF28BA29BF58555775076F277F0F065F28DED1ABBDEC1F2368
2D2D2DBD59B9B3D06A295D2B952195F62888505401E3EBBDE00025B101059CE1
98656E42C7E41C22ABCAF5762F89E79CCB31BC7CED6F90786026889467184EB4
96F0F454C5C28B5C63EA807D9128555B20F0F4503070BB61039F3B336EBA1D48
8F5363D22AA33F3036D6EEF6ACBC41D395FB9033EFF6CB5D087263591BE0B91> |
28666 <001C60D8A8C9B7EB0862DA1C93F59A0CD23C92EF8AEF6336085C604C1
17A6AE5C680FB18222C68C8BBD93FF46F615638B8B5B7537A82F9C92E5446043
FC24D0E542887FA24C30178487E4EBFB19A5AD9A263AF62E00CAF978B587A6A6
958A910CA28563A05229698AD31079B95CABA2BF04945FFA1EE9DF8C03363854
6444DC912615FDEF195B1205AEE6177B963487C543206ABCBC6BC98379AAE9BA
94E723EC4A511A01051DAA4D12923534EB0A35310090F1291F00C107F7D49E8E
2156E993277D6C5C7268CF8F074176E9780DF5DB9BB5B3826793370167907286
EA4> |
28672 <001C60D8A8C9B6ABDD8685EE67FA1F77A9B06C7327E48D96D7DF7E7A4
00FD1E1A249E3CE00B2440DD3F885FEE608D59048ACF173E7BD47A3B029FFC37
49ABA4A83CCB48804D35D6A3169CC31EB1D15AFADA5E0E0B59B26EC5ACC0DAE1
FE6AE1BFC6D999204DE6E7F3601C7460FC294F4F7F73DDACEA1E019C6DDC73A1
81E9A2B130534A7D6225ECF51FAF12729B5A7E99A9C581C1A47C104338F74B27
26C1B39D774887A3CEF3C3F595190B361D281608133FC25163DC5> |
28648 <001C60D8A8C9B67DB58745A4812DB18C0404E834BB6700364C8039AAE
84F7A1A283C15E8F2603B2E567D2A64E41F733DCB53EE725728B168773AA3468
651FBB477A33AAA410A2FC4629C70024A5D39B2270EE88C44D633> |
!
end
end end
%ADOEndSubsetFont
/UKGMMA+DengXian-Light-GBK-EUC-H-Identity-H findfont [19.98 0 0 -19.98 0 0 ]msf
-17.6218 -133.964 mo
(o\334p\001p\006p\007p\005p\010o\366p\007o\374p\002p\001o\263o\324p\005p\005o\364p\001o\372o\370p\000o\370p\001p\007o\263o\350p\001o\374p\007o\263)
[4.51544 10.6894 7.75226 5.93399 6.59344 10.6894 8.87109 5.93402 4.09595 11.2888 10.6894 5.79425 
12.5673 6.59344 6.59344 9.87024 10.6893 11.1887 10.09 16.4237 10.09 10.7493 5.93402 5.81421 
12.947 10.6893 4.09595 5.93402 0 ]xsh
%ADOBeginSubsetFont: UKGMLZ+DengXian-Light-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/UKGMLZ+DengXian-Light-GBK-EUC-H 1 GetGlyphDirectory
28431 <001C60D8A8C9B5EE3103810B2AB6B9968A091F162216D10F79159F5C2
4E3B2434883AEF1CF826632FDD14DDEFEFE2F077569CE774688F0B4805A78FDE
599A6> |
!
end
end end
%ADOEndSubsetFont
/UKGMLZ+DengXian-Light-GBK-EUC-H-Identity-H findfont [19.98 0 0 -19.98 0 0 ]msf
231.278 -133.964 mo
(o\017)sh
/UKGMMA+DengXian-Light-GBK-EUC-H-Identity-H findfont [19.98 0 0 -19.98 0 0 ]msf
251.258 -133.964 mo
(o\334o\324o\350)
[4.51544 12.5674 0 ]xsh
%ADOBeginSubsetFont: UKGMLZ+DengXian-Light-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/UKGMLZ+DengXian-Light-GBK-EUC-H 5 GetGlyphDirectory
28432 <001C60D8A8C9B5EE310DBA0C90EDE043F6661661EC522B39DD605421D
58C130EDFCD284358F873846844558C4E5020CF92F9D3AA34C0C83FAE8ED55B7
F0474> |
28435 <001C60D8A8C9B5EE310D809D0850656AB9B63FBD25FCC69FCA16CA2E6
59136890DCAADFF20095544A2A8D870> |
23582 <001C60D8A8C9B5EE31027A44621177D347A1010F3D34309C22E9A36C7
C5404F546FCE8284FA9CB7549EDBC1E287C32DC6B10196740F202F2721102E6E
E5317C69DAABF9DF52BADFB34B85A89B4E9D9136D57D1BD0E37B20C090BC77C8
2824294D4F4D3E6DB10A9196702C8679A2979323A61446D7496BCC7AF7760807
8C6F4B92948F8A025391AC0D302D02235D0C8B0A8CD5FB219F00D84A9A330317
D7B7D61BADE6DFDB6243822298BB695B65B445F0BE90E5007DBB0BA0D4D30C7C
8DBDAB06920E24D4AB22D51AE2815D7D97FDE3160AB759933305F8DF3348C7BF
7F7B34F41F48FD881974C5AA5B9EB90D2A4896B2922D6147106C5339388> |
23586 <001C60D8A8C9B5EE313C0D93C168A40FC65450BB479575D71C53F1D63
EC0CCE329A03949F6444FC577F0795B66B2667E3519B64A0E90DE42D93FC4433
C30F1DDFE675A021208E6A6C49548D6BC3E3F7074AE9B02089BCE9F412107F82
8CB06A115438E1C778B1DBD162836980DBF1078D25D7B1E440AC1621580EB80B
ED5901084D8EE0B903E117B51BF92552C35CF23FD4BACE8F50A5052F8EF8DCC3
18B78E6F054E3307DFE252321D61B1EAE9D4EFDC61C72FBBC02D63FC37EB989C
D244212F287D34F57F12CCB85B7E2C6485FA15003C23E7A367E74E70A7597D97
D24D435FF4AFEE6D605423D851BCFE0E71080D9E94E9F2474D9BD17AAA8D47F9
0E86C6AF77235CA783A4D7C89D556FEA0302556F795388A62F80D545200888C9
4CC51BC85BBE447BC7A95A804B004D2F9CBAB6B2E39A7187C54F01CB1F810C83
55E2A15C07C19A86D4F45DE4BCB> |
10888 <001C60D8A8C9B5EE31347530C03FDBCB043126CFE0E9DAB21A3C91FA0
7ACAC37EB324F5684A706D382E2F39E46BD88A4B1BF13285DC3A27077843C711
E20BA7633F3CDEF51DA9CB276D670446C7492BA4099F5809014E193A04464EB1
E1CC60145B5D5D1C3C42DD70D6AB726E572A7ED9B2AF8660D377F32239F0C872
DFC40AD091A500C41343C4795BD92B55CF7BAC0C71C13BAA0E0614C9F056C89E
1E18D04812BF4727EF29E62685D6426C39C3FD3794944CE59AB5ED61FF29B698
BFE7D35EEF9FDA0A7B1F3557F1078EA5FA464026FC84E750FAABDA9A9A2F212F
5EAF426589206897D212BD17AE00D72774C2CA7CB3D1BFFCB6B85A10BB761D9A
30B66CC39B129C16173B02F9750879B45116430F38847F09C21681C099E051E6
98B7F15854A327B5876A2B34F03EA82D4A07651066DF0AC8E1847C214CD1482D
10371F6079C62F4> |
!
end
end end
%ADOEndSubsetFont
/UKGMLZ+DengXian-Light-GBK-EUC-H-Identity-H findfont [19.98 0 0 -19.98 0 0 ]msf
281.258 -133.964 mo
(o\020o\023\\\036\\"*\210)sh
%ADOBeginSubsetFont: UKGMLZ+DengXian-Light-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/UKGMLZ+DengXian-Light-GBK-EUC-H 9 GetGlyphDirectory
12945 <001C60D8A8C9B5EE312BB7F49824B624406EE76B947CB35F68272852F
E1213C4F3FA6B3E90DB2074B7F2D9E07EEC87C65CFE2FEFFC6D2483E5483A4F6
028093417D22F7B37B05FB6D8241878379A7487933E5F526183E5DD7F2DBE8FE
837FC601A3CDFA6A9424066EC9CA7FD4EC38CD5ADF2AE0FB888C32045C127D08
2DD7B78EE7BBF063062E66F5AF3B1C6E14FF59C428A4749015572F199F22471C
39C9426880518B4A1C235E6BB5CC8F40DF7508DFAC317CBE7ECDE191ECC93168
776FFFA4D28E426BDA7C6354249CB393DE6A53AD5560212991D72704D315E3DD
F5897523A80B87E8F01BA88933757074B3576EAC202E9F14692F6F1C15600662
BE3A23E92102A71C9D0CDBCE204FEBA64A923D55773DDF06FAFE43756F869932
BDA33A6196B9EC71076EFD44FF76E846E738B9E3936A2AF02232D94075FDAFB6
B7D129EBB9531590A10B79193838C0A6B34AEAA063F54867995F07325DC6B525
05B864246C445C9B55E2433EAD1AD889F9460B651247DA6AC489D7889E9E76CE
0BA3E5F532C3BF1B4097DFF60> |
8708 <001C60D8A8C9B5EE3117D82AC00988A2C76D68ABF9429AD9528C15A6A5
612FCC42B006D2577F0CCACACC3045087C332C478893534E8FDDD907602249F5
42107D99380C06F8376D03F700DE4202C6804BDA610F4815EDA7C7E3B70A5C26
25F78B27186E6259C59215C154DBDC4C1AFAA224F799BDAB3A206A4AE742A77F
42E6F6F404DC88E469055337023B1DD6FE2415917BF8BC247749E656D0AEFF01
AF6AB5622EFA15129C2069F6846B433544677F36D72FB38C5D56471EB0A63293
B3526B34B40F6597A6C1DE7D0B4B5D671AC863FCE7F4870AB896072D8C21FDBB
B91D7211E275CD9B1BB5D7B044B953E3516FACBC9E8E2E1418A5C3E58DB7CDA0
0E112126AEE84B10AD26C9B39E8C44EE08534364EF6A4814ACB037F5CB9CFD98
F0B225> |
12779 <001C60D8A8C9B5EE3130BF208B3F164C373DBA302AB06409130A9D0DC
0FC813D282D7BF5C98F925E054A25845BA7807BF2E7E7A5AD239E6969C73A6EE
DB55F87F2889A84FB63DA5E1415F13DE9C9087E616EF5C2A1A3550D18BF14DD8
FE76A49DDDDC29239CA58C78FA16DABD4B19C1556DBFFA7BAF84FD116A45733E
745D0AB8F0576421F12E2DCED44DA8621BE0FA18D278FD5C4A230A2FFFCCCFD6
9C553F153D5AD9832DD18E37997D452DD2F75F319FA0DBDBF1A39901E9AB7803
BE84D19A360099FCE3BE01159E9AA8DF476B689512CCBC56CA2DDEF143DE4F7C
CA18066E5524763C00D06FAAFD7409206A5BC28632D9961609A099500895E3DC
95C071A3785071FD320565E3D23DC297C826F90870D6BF4ABC4B43014A2C00AE
8914E510CC61A00FF556BECDEA8007366831E41E2571C1DB4166F0AE29649923
89B3A2C13FBB8451F108A56A2440D7204E1A4482A6C7E88A3CC5BCADE97D27B1
510A237DB50D213FB1F45E6E3B8659042D4607C056C50C3769E5D10C3AA82400
893EA0F5A18BDF7C77941E7011506778370B5A7C503C8175E6E> |
21849 <001C60D8A8C9B5EE311F68BF4706753CBC2150D854928361BB794DA93
6903FC077A54F9885448CB5805900B93D3AE67758C809671B508806B3A5824EC
6328307C67E44BD44B0FD7F6562093316FAE1ED68C091DA397005CC03599336F
4086714D31C1EDFAA5885A4D80D997E82660B18562A33836B6C3FBB3067AFFA9
A0E0AAD036F0E52F786D0C38D4B5C9ACB3A170958B3E91DC2BCB4B2633E4BBB6
7EBB7015A5C1A3BDB97BD70577B618111C14BECE7C013F0074E2652470757B98
0E611B07F89830FBE866D58A4503A69AD7F79E8B68E93E09CA3F0FDA8064F3B7
9723D3CA3C5D9EDB41428D9E4C4D06FF5005D9A7A1C91A65C631503996E64B8C
269F25A191A543355E0615CD619DA031D7302E5D95E4C808FE84772DA38CD9BA
95B5F959132067CC272754758EB0EEBA2B2ADC480BEA27A510C108BD753CBB30
BF9CEAC97E7034B799C3C414878799CDB9548BCC4F76B493BAE90A5919C9E3EB
7E524F1BE19D6638D731D4A5F237288288DE4EB7EF939CED8C6FD943B94960CA
D953B2AC6E6B982A858A6E34F9BB059274962C6C419803434EF81FED7F43B4EA
3F6496F024C1166D8B07B4ABC52CA2782B52D91B0FDFA3093DDB6C0CFEC52AA5
850F34F097C807C05D7865D55CABBE0C9B0C387C7B557DD09DAC3C3647627425
8A577A913826DC94F305DD4E9D312CBCD2C08DEE60F060ECDBF20533C6D> |
13614 <001C60D8A8C9B5EE311A7005EEA7BBCAF13D1DD7B3FA8A6CDDC5C7B5F
E689EF6A5177013998A5F9B0A549A6D19BF7E9AE7DC0E48BB5122BEFEA95E5AE
C9518FD959DA91ED323EAC695F792CFC2FC02F12BE9077ACABC2E0C93B170229
AE39FC957BD82F6BBB237296BB4E4F1B7ECCF6E3EF59F217C58085876D99CC78
7F8F8CBC3CFA2F0902F407F7395B5D35D728867B561D0361C783BA27A5346B42
3D87283100A0DD9D1186F46754279F1FBD194A30923FAEEA64F0430E4ABE88E9
77D5CCBD67778A142983C138DB3F53BF44A470F62C5BC1E6797DFD8C18E5CC67
6B85C97E9663DF219F12BE8D95C8AE481C67C08369C14F53C4287933854CA404
5F296C10208BB438C2D24F7EB5C2665CF49367E15AC3C9D6522291D95B9EE16> |
8997 <001C60D8A8C9B5EE312F824127494B78A8845A0216CAAC7B4A3E7899A1
0648C02662D112DA2984EF724CFA473F91C09060D0CF353901E18C9F7A6DD27D
8C18390BD94662D3B173BCF07752D2D5CC36D2DB96DF92D6A731A88C9362C91B
FED92064E627ED982FD3AD7B2E97E2AD768E208B619D380F0DFDE343DC8200CA
B1888DBBB994CCF38E3EB8288CDDDF3A931406D554C2BC84D43815FA439FFA0A
B5FF469AEE04F41E49E926FE4A8332A286291B2C597DEDC0B90BFE8B6DDB540A
69BC4FCF140D9EFDDF57E7FE76962C133CE8E7536CDB88447C3080D79E07DED3
753B00D1CC5653FF5D7E6FA451D36DD7F2C89E8D476CA8F1CB7F93DF4D> |
7711 <001C60D8A8C9B5EE3112EF109BFA73DF0C95001BC61A9F4123763415A2
A0E8A791601CD8054636FB01F64CEC05C28AFA7F585488C132E7105847603671
7D480B6D10551CCFE838A7B6439BC1008FF05FCB2C38BA5C69605BFECD40E12D
0B5EA7DC1C5F1E703140D149ADFC247477E7C34F47A9EDB25D18D972C82F72BD
B3D98023DBC879446DAEE71633D6A47B16D614743245495B2FAF65149D73AAED
BB377B0B3592C670F415D037BDE652E7375586407986479E6B71EE018C3FA083
B86610B53BB153D8AC32EAA6CC0D8C7D1F43C6D73341AE96DACC817C3787DF23
F1A28B4DAA2D9DC14282B714AFB7E2665F3AA1643FFAF90EB8F94341C97A02B0
8FEE713772F3A0FE2E86BA098D841DFFFFA152EDFADDF8599E8B0C6B8B537ADF
76739C2D3DE3312294A0CAB8A3F62A25DA8CF31D3E> |
24210 <001C60D8A8C9B5EE313273193A6DDDC9D17E0156198CFC7D0C60DF0FB
AD135F793D3EE19B7E0104F45B9D34B7D94B4A8B57D373BB1EA4271644C4D7CF
E7561311AB8CF4919F3A07930B6959698EF3A6AD7DF565C61D4A87C4FBE642F8
BFDE379ABFCB64C24A3ACFC689614BB13EAFBBF609B1C168DD4AD26432F0F30A
1DF498C957622B752D07B74BA2E18677ACAC0FA6BCD8355F3BEDC3F83B2DD50F
B291AAA6EA2ADC0D5334E78C2BE93B74DC05D37C419DF59C022DA90D4A8B84FA
E14F2AC9A916A6BD9244EC2DE9B9B76E7D9FEE6A191EE5B9F275579CA491EF36
84681500AFF031C20E6437184E4CC44F59AF945B1A2A9C27282254DE4F0C6527
E74C8ABA95E016F76FC523B16D7217CF6AE2E602138195A918D6EA2865FA6E36
F7FDFAA7F22750F717D88CD3E1520B1B46EA21919F0D05FE43ECF9A8087BC7A5
9889A31FA9A698C0CB524D465C00AB1547EBBC15F46186CEAA55A1A765EA9D50
5BACB486265B43EB32527405FA79351C0A9F4DEFF3FC395EBDBB46E2DB4679BB
4BF8F60738F04612BF36D42931DC37A59331EE7F0049693A4D31BE79846D2B7E
0649A06AF6EB3526C87E6FD36E76643CEEB5A2D03D56379D5514D8C41592FE49
1A6699942CE691FBC1EFDDF5B704AFF3B554B74D2EB307732321E2152CBE85A3
6CFF61601FB20F71FB38AD0F44FA4200F4C7092528264939F2E7E6A8A370C27B
2456BA34019C269BC9B6DC7225EC4D6A2355033D6FED626E012BC79633EA732D
D14D927C3AB1CFEE1F07310A5A3B971F889D56842> |
19928 <001C60D8A8C9B5EE313A0E7B2C4B688FC4C02A7AC0CD3857B2041F61D
86FB08BCE6123FB84B37CD26A9F6B00B7ACAAC6DFF199088AA2783BAE8973235
F47E1B3EC1755D1DD8FA6DD7A93172C4EFDBADE7F27A7392DED83F6942910737
87CDE34008E8FFBE4833A58A5499E7ECA9193918AD9D190538CFAE6BF6CCE7FC
04740B1D4653625C1F24775D968266558979C2FF1823B60EB74A9D0A2D89FBAF
47966EEA4351AFBB287F1191ABDDF74F3765942B2CC9C721500291698E0A25A1
91C673BE3467D4B4295056150EC5C465A8C9D8B0C9B39A445F112A0EFEE754EB
22AEB09011F88AAE50595F2C87FD787C25116103DA4AEAF946B7DD559E1A5CD9
B9832EA652242DD77CB8B5C2E653192B7FDCD43EEEC3C53A7ADD0EB6C3E930ED
BEBD5463B52CD28E7C8B5AF66A7EF283ED857F96593727A2568AFB0A435BCB6A
7FDE37D5058BA1A380DB169B21DA4D19507A9321721AA05DEB445705FF1D3255
2C1B1904F6EB217DC57698808D862B6CDE0DD9B80F4783A5723ED6C366953CED
E3EE268> |
!
end
end end
%ADOEndSubsetFont
/UKGMLZ+DengXian-Light-GBK-EUC-H-Identity-H findfont [19.98 0 0 -19.98 0 0 ]msf
-460.402 -112.364 mo
(2\2212\006\035\343o\023"\0041\353UY2\006\035\3435.#%e\377X\200\036\037^\222M\330)sh
/UKGMMA+DengXian-Light-GBK-EUC-H-Identity-H findfont [19.98 0 0 -19.98 0 0 ]msf
-134.882 -112.364 mo
(o\327o\370o\366p\002o\367o\370p\005)
[13.4664 10.09 8.87112 11.2089 11.1888 10.09 0 ]xsh
%ADOBeginSubsetFont: UKGMLZ+DengXian-Light-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/UKGMLZ+DengXian-Light-GBK-EUC-H 10 GetGlyphDirectory
572 <001C60D8A8C9B5EE310DE974772BBAEEA6282902ECE929BA657E3CA0BAC
F81FF6DFDB67122478D25D24D56977C5B16E3316094FAA66C375574D7C7D340E
59997FA54A1F5E468C03B26FA19> |
27095 <001C60D8A8C9B5EE3140D64A32D84070876457943A8122C84F308034D
12982309BF3671BDD9FFEEA042DE739862D69C5FC2991800399B35C8EAD85CA4
C24A7EE34168217824C346F430C1D687A3C62494EE74BC2DF7EDB474D75C18ED
8B8429E8720D9A62E53F7E016C5B0829EF4258AA5E3E42F4C9257F76E6675240
BBBBC6695618DDC309A3D4071F8C51497F522C6E832BCBA361A1993764287DF0
C49A9FADF2AFBCB960806CC7CA1AFAA1BA2D36CCE583121135418A4C11ABDCBC
2D6C301FE53460C92C39F70F6D23B2F82E4ABCACCDF6A7DAF4718582F9EFEB5F
CAE4B5A2E19E2C512406D602A45D9FD94078B6544D7EEDB3A43B4C34A284AD85
FF14815C221443188C518657C1127BF598498FF7F2A560AE2DB9B984CD18BFAA
AF3443AC7088A2A65AD9730126F2DA32AB516F6A7EA7CF55A645860671635992
C6DF7881E0613F130FA73ED4961F2429E81B2F8630E7FE0221850B47A134F1D0
C849451125CF73B8079471E198E2A93> |
7757 <001C60D8A8C9B5EE31371AA280C476C021A94BAA218A5EE320D1B9B87F
483ACD45700C2BE156C6D10D3EB4537AF36BC61E9C169E5DA6761EDD6D8DD230
DBA6047AAF9623BA525A1DC5A66D646ED7F6DE6A25EBEE1A5237F03DE986A1B5
CD4B0B1FA0E532D6C0591152042FF80328EB860AE56D9E9C20D2775852C8BB3A
48E1EEEBF57F3B82CD884A98A749AB8869B79D0DC8FC9F40B1405EBBF7F01E80
CC158E22056BBE8D6CF350A5F302A0080ED4AF6E3D722F828002AEBC8B5D890D
094DF7D11525C87A12E51E56609D59A3E74196E8858309365E983ACF448EA2CF
1C4B615DAB95665DBAF3B89AFC2D6653F19A488D9AD4115DC0129394F4CEBFF3
22C5F414E9B5F3639869C80418B1F38ED282BF8981098995B575E9C8C6DD430B
3549378D3BF831F8484607F904CB1C245FABD79AFAFDD6D946361F21D0C77D98
48AD5FCB3B3D9B60716C4C545B472E5D167586529CA983ED0148402E> |
7703 <001C60D8A8C9B5EE3100AD505AFDF9D4CB665388E48A6E5D336C30A638
9668163950DBCE8AF4516F8EDA7AF7684938C92BA3ED79BD6B92635956EA5A88
89DE6AFE313EF5D39DBBAE85FDB2F1653F030EA7C482B95C54C65B163EF12295
535101AC7196389D7BACC6D67230148CE4C37F0AA7C07676D84667A7D9085808
07491595BDAC52BF1B11F8EA527EBC66E1CE4BA53FB3819C0311044449BA82A2
E12E66D5834756273FE46A4AB9ED4EEF9DE5C831C7D4BBFCB6B6488FB927B625
6FEABCE2CFA3EA5ED093B26FEF1F33DDAFA2930D74979AA2E52B5D201A6EFB99
7A85B864920D259F2454E12CD730F5D0373153317822EA4644C63E3777891D03
B46D6C585B8BFACD85BEF33423D737C4046A93CFD023F6E7BCD7C5A0DE946D20
AED941C32B13D6044A4DFB6D657758F2A060888EB18968D7> |
8263 <001C60D8A8C9B5EE311D0D375E7641B74185BD05A5A486921C5F8C0823
CCAE84E30F139CC07EF7AE19D5EA95EB4E9910C5BF4E132D9F777C354C2959A5
11E8ABF446959ECF1C37309E2EBAFC3E230E6116B787D7E9FACB3C64624ACDBB
604D02D8E99871C1746FED84EBE25543F4A1502CC7B295F00173E3E47DD075A2
C8AEEAC3926BD10C5E117E53878AA01148FF5BFE110F655F6E0A15292BFD366A
2C44FD43D78A4ACF3BC942F55D673F806502C27472E6231DDF390B1176CC2E43
093601C453EEBC8E72E840FC2E3AE52508B386E9FDBB20AA82AA2BFA0B493FC5
C4113CC9501524DB80F36E7D1DB0BF5E6D63624907C7EFCF317E0C317208C8B8
827FB60392DE31A6962C0D478D54EC8B38F0778CF5314E8999E268334A7472CA
E4EC11456343E13B6CC2> |
19878 <001C60D8A8C9B5EE312BB85D73559F604A3F2C2B0C425AF94DB941783
9075A43B35C96CEE6A4805DD6DB86EC65512E7F3E828D94B9148579205F87AB1
C066AA3E8740C0CFBE23A1C212E2E0CCA4938C69DA8D404E446FF3AEA9789A90
0BA589FEF69571DBF0A950AA0FB6999892B4C7BB570B3DC80B2C8A0972BA102F
0FE084D94407B6AB7A0D26B78220A3F3B85CCA070A818E75203AF17BEE24B55B
7CC41605C041C542B0B49AE3A324141F5684DB113B184EF285A02F45A70D32C9
A7D63F3C87B94AC9CE10053C6916BFDFE10F5E99D2601829A5F7EFEE8E5B7937
5A90C10D3DC90FACAE2334FB910790CB3542E5645B9BB4A162F8D921B15930F6
A27AAA10D45557D403F0EA6C2B48B0AC255E09E98B65BF74DE16AF48E7CCF191
44C4A7A064F1727E422DF75BD13A71341B5276476F54D6E1941A5C8C9B7A3DB3
58BC2A31F17CB7D826F4B7C28EA532060BF74D4BFE52A4E7B0C37> |
9775 <001C60D8A8C9B5EE3134F6F7ABB35C34EF227DD6A7C67C90E55528D810
E5922E0C3B664FD46196045A9622DA0892D31B788C24F56C5B26934360DD4AA9
C53E6FA19B440E030A7BD2B69F19AD014A3B825485446A4D9F9E739CA86F88B1
23BEA82D34669E44C9076AAEB8E25EB495EF635B47714D7C1E4D270706EC6C47
A569066C3F83C02D87860FDDD115BE302E8DC4A92DC77F2EE0795986454D9B7B
84018FCF050D6CB5FC9C353B082137F68B0ECBF7C44C030090E959396012C2FF
09A551D041D8D3A81A5ACCF2838A57815D5643ADC990D261C5E4A801F8B5E5A4
01D39C4E0C5F0DF2F4E82E622AE2BD139FA557B62EE2343CC08E92EBAE0FE667
42BF03A2AD1B99F07A9AFA50843F07A3A86511E87D92FB9F1CA37003896BD90E
E197FE588EA259DA929EE696B86B3D730287F116DC71A039F5B97D34BB875EC9
AAA980854F3CF2A3213BC01AE309F891E11DFA0E5B8F5BD8FAFFED3AEA34CE75
772435A052612D9AF04D> |
9791 <001C60D8A8C9B5EE313AD35DB0612832498A6DCA84AADB0CB6D488CE3A
3BAF84E4B8F56DAC208F634A89E5B50C1DE3FBEEA2128FA3B25646543A51D0AD
E735331648EA7B478FB1F92BEFD75684DFBDE658657557E80738582CEF85F7E2
2CE99F4D2DE45CFB80EF7FA89CA5307D9FEC74E9E98782752F9D6869EB28B481
C1E57ABC263ACED170BBD47C0265BA4C40AFA8DD64FA0A2AF21836B66374078D
9D36C34DECF0D45B7B0A772A90ABC6EF6705E3DEFE3A458EBD1830BDF7584CDD
C8E651DFFEE3E74677F1F90D4D97E0A290350B5B08A1A39DA85BB677A3F81200
6091B0F03FD2785CDB7CA777FA0FB2E998D13AA491A71426> |
17795 <001C60D8A8C9B5EE310D0AE8E2180C8D54566015A5275B81E849ADBCB
BD611ECB79FE9B25D0F8A42FF65E78104DE5A8FA5253CFA32A9FDA2432E2BB9A
B0D8018D4780CCBA532FA1171D4C66E486AA3F6BFD75BA2E7204F755DD53A525
DEB97A4D74B4A65979660FEFE62AC982038B734FCA36EDCD494A9BF21AC3A00A
2539388B201A49C925AB1ED0ED8F90A5845903ABFDCB85905B9283A7FED0E384
0F899643FF03A7062479642DEF37108A7D3A18CAE1578BC9C4406D4DB5A739DD
48B49630CDD220FA8D38837C575A27DB0ECCB1E4CB04D88119EE5BCE3763B9CE
BF85FB205AA4492E0D380CCBF90CCBDB8EDDD5612AFF9B152F775FA31043ECF5
FB6338311A57E87EC5028A7FC7AD0BB1D8FD606012AE7D2DDE6C906885958B25
EE0C9475D7B5110690B2B2DF80B8E90DC19B7EF043E14DC9FF4DE28BE856DE34
E695CEAD4> |
8725 <001C60D8A8C9B5EE311A7C7A9A9DA4BD936590082D7BF721F211E7C300
079C2C5B87455C9F2B97426047812846B20C9ED1231935F7B9FD4945DA014FE9
75925ECE223992F172EE777C01066E77EE5D9B9FD7296D9DD68808590538B281
E451DC1B787B37230847C155C86A951210833264FAFBCBF4C092F69B0A691B01
2AA4662E78C7343033BB29CB442AF10CA65860E1126107E575804532918B790F
66D96F52F470ADA83EE648B3B3B31C984B6D81977F4F7381939131EDAFDC0D5E
A72B3C5C71AC4448EA4037AE70C8FDD7EDFAC922888551178E387289E956D757
B3B25D0AD42F08256E> |
!
end
end end
%ADOEndSubsetFont
/UKGMLZ+DengXian-Light-GBK-EUC-H-Identity-H findfont [19.98 0 0 -19.98 0 0 ]msf
-63.4018 -112.364 mo
(\002<i\327\036M\036\027 GM\246&/&?E\203\036\027"\025\002<)
[20.0199 19.98 19.98 20.0199 19.98 19.98 20.02 19.98 19.98 20.02 19.98 0 
]xsh
%ADOBeginSubsetFont: UKGMMB+DengXian-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (UKGMMB+DengXian-GBK-EUC-H)
%%Title: (UKGMMB+DengXian-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /UKGMMB+DengXian-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-141 -253 1151 954} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 29235 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 8 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
11858 <001C60D8A8C9B5EE310DD67710FA4584835AD702429918AF20E2EE4AC
666A2B8A01F551EF279EE7F693694C04F31F3C044D6C22470B2139AFD6654234
89E52544739BC2A0415D20732B749183EE18A1BC544F87473E9B289C836622C6
2A902444C121F6BA6137A7FFFA8A4EC58024C231BF6B5182FD5F182E57F940DB
AE6072D2B05E97B12F9A6C177C0E713FB2CBB10598CDB4A515F2ED236D532629
3B87FCD24418D6F051D0F93368690EEC0B171A3C7DE35DAE55489D9CE1FA94A8
CF9CE17C9E9912964DE0A52B01C18E1476421E09C88D00027834A796959707D1
F5581617DE9AAA24D6F31F5E5A7EE93CC> |
8524 <001C60D8A8C9B5EE31021357AD9228BEF32AE433C0BB4F78A439648B6F
7D555AA0AA3D92F2CB93654FDC1258EA8E89BEDD5162E559C649D4CA3A18F344
0F9CC4A6B9C5C9A04EBA3198B625D22958932CE625F9B561E0FECCBB47232F1E
3E07CDA67E1C41A5E32A6C7CEE7BA7E310EBC30BE156BAA1E64CD36FD95457C1
0C85BD25CDA4F54640D668F2456E5B76DE370E41FF2AB228EF60BFEE2CCD2650
C7C4DA4523E6A73DF65CF116BCBBBBA3A4F28D16C0D409418BBE4E7103CE8E7F
941185B8ED31636AA2FAD01677B4FFA1FA3FC328A40DFE6B3E48340EB435843F
C673297ABD4F8908892BBA5C9FFCD9CF1FD9E09B64BBF823AEAD7273E140A45D
61599D534CBFD88E1064ADAA4B77C961EDFDCB8ABD372FC8CE441B4A50EA576E
34678BA2A0930BF91477C7368DFC3C8FEEFF50F816941C614EA29A04FC66AADB
BB6448C4F62297FA2007229191732823162C2A51752F32BA05C87F4D0BD53F58
634DBA96B7B3218D0F4234E7C84F333CD6FEE5554A1EB12695BDD8FBA4E8CC45
33CC048572E20E1D8DCADAF422D4DB563A> |
8607 <001C60D8A8C9B5EE3102C4917493271F4F301812AF67E3FAF25E8B34D2
492D4512A6FC95C8AEE21BF78EE13BE4DDB20CE0F80ED87274C7DDB4A90B3EED
C1FC133B7FF99FC54037778DE42843D3316243CAF3EECF79E159AAA9CBA9F7B4
A1509E4C0ED793FCAC0C96B3263E8C56A65E4CFD299F20215026E3859CAFA379
31C58CA50CC17487DD2F16E65BC0078FADC6E992F728F7CAF636FD0DCEB69B5F
5415731CF23C51F91987837656E5B2B1C19E1FC7E792DA801388B8C9973BD6E5
9E612393B78500C3EA9E2B4CCF24AA378EEE1D7DB99326031E01EF14488292AC
1DDEB41D7BA059EB1098506C4F1CE3D9522161C2973B37853C8EB5EE7AE58C5B
3CD9995EC4A0FE217F3399A9B75F8F31620249440783F0ED51908B> |
24350 <001C60D8A8C9B5EE310D6CEEFB044F713790F417BEA058EE808332AC3
68FB286AA4CEE19520E02948CD1745FDB0A95BEF3514EF285893A86A2F1BBF7C
C3A82044775A8E8357B5FA9C91AD6331EC3A627095CAC3AE03E1B23B1667187F
2C204D9E54C3439D0C0674860E16CCDE6A6450CE6EC5C9FEA98659BADFC5D277
AA7CE4745E5D4E07A4CA75F404D3C7BDAC4E12EC078C8D55C3C778D7F82E64A6
13B23D613B6BF6D10CB87284C1879CA00FB2FEAF1D0B447DAB54E0915B180DAB
1A22B741708091FF336A4C347B927E9E66B73C35A1ACB703E0E998D805C178F3
FEDB478C6ABE1732F17F62AB897AD8F7EB61238E332D6032FDBE6AE108F1E81E
BEA281B158AC4792A3DA1B47F707E55A013F69DECE567C79661FB329CCF9EE67
E227887291B1AFA79E8D04403F3D627F5F2E984659ABC0AB9606AD8C79897AE6
D5D3C374617D8090FABEA0E90FC57CC72099B4572D5B6616E9AC4DB74EAAA32F
D7FA74CD895718411275A9F0CDF233847826928D4A10F4FF7B4FF0E9982D8B8D
E8A0E656AEB0A46A94D07B81155E7A32811AE5E9702D70455B3EC3B50A8C8035
EF198D10C7115E089C8C6814743DBD9AE8496B65FC31FC584> |
9575 <001C60D8A8C9B5EE31371A078C09E5B91DE093C44BAC15F87531AB5DDE
3B0C7EF36D8C45DE136D8391AA19AD20637FDBC4F408C3D506A3C3CF555BF732
4C362801282870005096D56814DCBB648722A1AC08D1149C79688D2B64BC5FF3
23FDA8E64F87178019A098D4CFB2E23F491611CAC4B894F7543085AFEAAE92EB
B168B14C65344392602A66DF258DF3A6A7A4115A725CE54C0BD00B9A9941BA61
9E35DEFF2E025F40E2AA28AF71A2D5154FB8AADF19CB77B1074DED211261EA53
F49D941B70E4D5F461A6D5AF767526DBCD8E9752B6A821DD16C99604FDD4DFBF
8C70C76B2DE97BED33748F6E18C7849DA664281B08C3C143282336E070E47391
62629F7AD47A445AC15EA7BD20A5B85B67E8633B642D8A9BCE19481870358D47
E4DA9A6E33F1EE5EE2DC86BC71CD8873C7DEFBFCE3FC69070B394454E67AD21D
1C24E2B5EDAA96CB14C9B4A8E4EA9486F6B4463CAAE6B250EEF28FFFE7FBF42E
9F67E6DF5D7CABD4D04B69A6578DCE4B3E4AEDBA6CE287B433DF974DE8C6FFBC
B243CEC3EEA8C333F4D1F4C46AF5685A5527FF05EFD56617063FC60446EF1363
A6BFC71FAD3A3C99CD2F49E4FFD982CAC9864A837BF673D3F8F3A21B30752A9D
850BC504A0B5EFBFD747EDA519A0DBC0B197CF05615C632CB76AC95E8A366A9A
1F6850E241B57DF31EA197629D65280998A44CDC78E0395B2C3448BB21366E71
2CDC9AAC2417> |
14005 <001C60D8A8C9B5EE313BD0E493F5CA19FA05E42643F2CCD245E9F0AED
DEAAE2FDBBAB05524F9074E0274D7ABD050478775EB74A294EF192AD08651F35
5CC1FCC4E3C9A79A3B355ED57212DCAAC558870122EB96E0A5C877BDC1B99C48
52443E1BCD656E0C45295F11481A4FFE80B1ED312261CE93CB4700C88C09984D
488DE6F8F9EC8CC770D64643FD1CD24EC709F3A588D858CCDEA4EEDC5D4739EA
8A361D9ED50E0555214D69847511858622B69870A304C593B564E8DDF98DF22A
B83F4E14E94459FB4E0945BBACDFC3CA4B4F3C9B560F31368D29745D9885CE23
FE8B1829B7C111CDD66DB76358D4F61928FE643AF3827D3AF84D79D190060852
47ACA8CF83A4AC2FDB949B33D09ADD59A526A1570C3B7BE633F17A28656A940C
B7458EE69667FBBE1C86804263E36FE409B99B1A942F8859340225E885B88B45
8EF5A087795522F857084A211386AB241846A37E5E2921186863424C146A13DA
78AD5D225A5081BF5DBE16B2FBC9C8DAEF0A9C9BCEEDF034C10E77D2A70AF434
9FA45A771BC745DEF06CA39A80A0AB412982BFCC0E0105B80AD83C9A6A354481
F81495271D0A2> |
13955 <001C60D8A8C9B5EE310254E1D4B529126AFD7DE9B4D3EE103258F9FAA
14EC9CB9F1B78179A76580840B1DC30BDFB780B869EFCA70E08BB2252D849BC9
CC84891989A1B029958A03A5B750CC4FDF03C8A1D62BF594312D6EC4DF090FF5
EE5AF37657E2CADC3F1A6A51B8D8B72A30CCFECFF06B8D63DC5BCD007BCEC8F5
F3789C34204367B5868BD47E0340F5A753EA4999A9973ACAC6FF3D72C6597929
A37BBB4B446DA4FBC1E50AFEC49D2524EF8F31060C71AF66CF924D4AF48ACEF2
AA194F73ECD37CA861AB012C0B4220C94E8D8C5B10C10E3FA1BAE12C25FE9449
39E358D447986FC15D7EA3ED5BC963A2D6637A53FE78E021EFF0158D34926E51
E198E76F8387DB1172C3052FEE49C520B0697253F4A30D2FADEF521AFE80370A
839D5F23E634A8A5947C0AE494391AE1723FC08AF81F83CAAB437216E70C09D5
41C707D42ED593EB7183326506AF8A5824209FA3AF9745430ECF017D43264F0D
B872F47D0DE6E5989D1DC1DAC9074CD619067C0809552590401B42B0DD56576B
D45D38BC20E3AC95C2DBE93C777652D22311746EAC38383E57CCB8C5C5D4075D
70F85405F9F753313907B55B77DDBAC0B29E367236F101F7032> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /UKGMMB+DengXian-GBK-EUC-H-Identity-H /Identity-H 0 [/UKGMMB+DengXian-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/UKGMMB+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
-347.062 279.196 mo
(.R!L!\237_\036%g6\2656\203)sh
-139.492 247.546 mo
-82.5518 247.546 li
-82.5518 21.8263 li
-139.492 21.8263 li
cp
.770321 .559594 0 0 cmyk
ef
-139.492 247.546 mo
-82.5518 247.546 li
-82.5518 21.8263 li
-139.492 21.8263 li
cp
.923095 .755032 .159182 .0290837 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
%ADOBeginSubsetFont: UKGMMC+DengXian-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (UKGMMC+DengXian-GBK-EUC-H)
%%Title: (UKGMMC+DengXian-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /UKGMMC+DengXian-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-141 -253 1151 954} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 29235 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 3 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
28631 <001C60D8A8C9B625CE6BD2BE419D5CB815C1CA0C61BA0A2D3DFC3B96F
CF9FB6F9E0519EA65E7C8EC76A179BF9356B2C1F7F4A814471AED147404B13B0
B2776E0D6E4D16A4BBA0742D992692136F6DCF6FD8FBBC1141BFB8994DCD1331
B5CC1B493> |
28645 <001C60D8A8C9B7FA1378253013ECBC2E2375A528708F98127351381D8
D6D4621D951E8F5F697D02315B161674B3B669EC72DC9FB775331F6348CFA7EA
DF53D1E65E2A1653259F1DF90BA621D0BA605DBDCF6462367C15F1F9BCD37860
53893E0E997109E5787E293F736D944B821F2A5> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /UKGMMC+DengXian-GBK-EUC-H-Identity-H /Identity-H 0 [/UKGMMC+DengXian-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/UKGMMC+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
-128.602 140.716 mo
(o\327o\327o\345)
[12.3601 12.36 0 ]xsh
-465.412 248.086 mo
-408.412 248.086 li
-408.412 21.8263 li
-465.412 21.8263 li
cp
.770321 .559594 0 0 cmyk
ef
-465.412 248.086 mo
-408.412 248.086 li
-408.412 21.8263 li
-465.412 21.8263 li
cp
.923095 .755032 .159182 .0290837 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
%ADOBeginSubsetFont: UKGMMC+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/UKGMMC+DengXian-GBK-EUC-H 2 GetGlyphDirectory
28643 <001C60D8A8C9B7931D88C549581514B303475B68F3A5B82FC10C33046
B1178E35B340E46A0F7AFD1D8477157DB986336BDE495E836D190C26AFD0533C
6A5709B3E706B37262928FC6678F90AED700592FB6F17C4CA4353B0E987BB933
7B4E4E6727403A52D0FD507E960> |
28646 <001C60D8A8C9B7B9B9DE69CBC96F0B5A3AE98D065C1FD7CFAD83FC43F
1290F4F9D34982C14CC513501F9076D4F8907F22AC9522F2896E944B1C90ABCE
1EBF569BE3E67D6DCC89DBF0C52716419D51E2AEFADD36CC19C82AD0FC3F3BA6
123D0BD3A2ABA4E110BF677253E952D076F531E23520FFA1895776A2199512FA
C9BD1336F7E1C8EDFA463D40ADCD492ED3B75F11D80658BD7ABA38DAF43CCBA2
32FE248B15967CE3B652AF643FE11F6C5568129285AEA24CD260CD6D81E569EF
64502ECAABE996CCD635CCC94E3C711D5E8195F3A715AF8260F36A77EC1CE55F
17D20D8E151C2> |
!
end
end end
%ADOEndSubsetFont
/UKGMMC+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
-446.542 140.976 mo
(o\343o\346)
[9.96002 0 ]xsh
-321.412 81.7663 mo
-218.752 81.7663 li
-218.752 22.6663 li
-321.412 22.6663 li
cp
.770321 .559594 0 0 cmyk
ef
-321.412 81.7663 mo
-218.752 81.7663 li
-218.752 22.6663 li
-321.412 22.6663 li
cp
.923095 .755032 .159182 .0290837 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
%ADOBeginSubsetFont: UKGMMC+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/UKGMMC+DengXian-GBK-EUC-H 5 GetGlyphDirectory
28636 <001C60D8A8C9B875744C21AD59FDCBB2749B2268B75FB3> |
28673 <001C60D8A8C9B795A0BECF06305EE87369211718D3EE2DE866B243806
8E9C56279E98DF67709852BED129643D4AB00494058DE56C3A2F59EF8337CDEA
A886E2F10A16806F6D040F0BA7348192390D4410BDA51BF850E2AE66992849BB
353A6DA88D5EB6C10AE42038B49> |
28678 <001C60D8A8C9B70582CC565B4883086947A53D700FC22CC37B8FFB6B8
A85AF70378C60D0C6B0C2EF31395945EDFB7DDDE1D0CC898F5B0E9FE9A7A1C3A
4C1BB863EE6725F120C3FDCDE3A35D1AD416BA23B64066650F85DCA6BABE2743
5AEFC317463C12AE039762DAEB1FA885BDDABB217799AFC3B5D24F6EB793F0F5
A070427208AF010078BB18257D47DFD185F390ACEF5FCC7BCA93E3E3197F813A
1D3153232223F7C7C1200BBEA57795F95EDA23BD6ECCB2B42F454E44B3FFBA32
4E2485F90A1F8549AFBDBA375D3F087391D68792DB8B3268EAA6F0D> |
28679 <001C60D8A8C9B82C91E1D9CCF2FA7601C6026EBD33736DF344E87F732
E6204D98A966E57A2BEBF7AABB5C82E1C8966BD3BF60CBD042BFA41F5E6D694B
02FA7FC2341B98FA0788772F503A3DD89703A16E741DB3660B5C616> |
28677 <001C60D8A8C9B81947031993F366B7797E01770F0CCF402A3810F4860
85B72DA10BE6CC101E91F1F1C8B8F646643C5A8F34CC08EB50A8A38B409FF70F
C08890288922D85661D7A1EFC0CE23BA363CBFF61764B> |
!
end
end end
%ADOEndSubsetFont
/UKGMMC+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
-286.862 47.3963 mo
(o\334p\001p\006p\007p\005)
[4.44589 9.90005 7.30811 5.72388 0 ]xsh
%ADOBeginSubsetFont: UKGMMC+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/UKGMMC+DengXian-GBK-EUC-H 4 GetGlyphDirectory
28633 <001C60D8A8C9B75E5E15AFD6A09866F0491F1027106958A942351926A
12C16CC8CE102375270AADD> |
28664 <001C60D8A8C9B7B9B9DE64C375A9DBACE95282B2312E3D85E750527CC
1CB7ECCD03A956DF6AAF4A7168B7148981EC76A8077847319739BD7AFC9C273C
D7ABB104CCAF232DF037808051A4E0AEF540B0A7B3AF3F3A775F4BE57DC95A2B
88BC481E3C3C5CD29A90412FD55B68E26377057408C4E5640926FF2E1A05E5CA
C44778E8205CC9A62299713EA1CA0206B13> |
28662 <001C60D8A8C9B776A06C6FC231F3BF82B95E430F6D347A409EECD485F
9B406FA6336964C8BF7664E2AB055B44D3A06959A7781CE4D2FEDDD996C546F2
2FC5837E64BBC80EF4699966E80B1E4ED4A9C3550A8BDD97A63B0696CF3EE432
A03807D55000A523F2214> |
28667 <001C60D8A8C9B795A0BECF06305EE87369211718D3EE2DE866B243806
8E9C3C724D0F5C6BF169F72E1C71967F26B4562105E8A8583BC41A15D900A2B3
FFCE9F31BD4591CB25C31293EBF9381ACF282B598F9431868A2ECD743332A8F6
186BC7793F5EA54E68DE38FBB93> |
!
end
end end
%ADOEndSubsetFont
/UKGMMC+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
-290.882 68.9963 mo
(o\331o\370p\007o\366o\373)
[8.58609 9.25214 5.72388 8.15405 0 ]xsh
-415.762 40.0763 mo
-328.342 40.0763 li
-328.342 41.0763 li
-415.762 41.0763 li
cp
-329.342 37.5763 mo
-323.342 40.5763 li
-329.342 43.5763 li
cp
.770321 .559594 0 0 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: UKGMMB+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/UKGMMB+DengXian-GBK-EUC-H 4 GetGlyphDirectory
12806 <001C60D8A8C9B5EE31009EBDF88840ECC2400DFF258F537A4D6930540
1AB0273F2B1126B6C3A50001B8BA96B4027E7A8FE9E9C8E1F6BDA5C4C3B6D7A7
02A8AB6EBE2161BEA517409D8180074C57A1C35A0BE9B2E0BD7BA74E0731E7F8
0BEC6FF5750BE9FA0B633D7C241698ABACC93F9DC09BA6D01189148C335A2F45
2ABADD32311D6C4F222815088F90AAF9F4EB797B4D1B72C2F93D99E2392E10E6
E101ABFBC062D40CCFA4A07962C04F02208043E60261C6FAD9ACC9D58BAEA715
6CF0D0C257DFDD9955B552728D58243C6A043822F0D594C57C9262FBAAF07903
47C336DAC258532CBCA2B0B386C0BC03D9B26A11D8A237FD071C2288BFD37C95
1AFC09537973FD483DDC4D8B4750A6D72A28DDFCEDA6C79CAFE49867846CC958
68686776263E86EE8B510298F9D4770BC3357073328E2062A7DFFC52E34EED54
1EBF8515C31168E5C9517EA9962B1F5EB27303C462BE3DADCDD77C3F5976AC49
F36F5ABCD29E030971B487AA5C16E70FC7D03525DFD76B613CD59A805B920709
A0732574BE85070D376D0B88D747EC05335398B4D97E0B10051AB7CC667BDF04
E6F5FB6ABA00AE1D82F7E3F993C86157FB348075D6CC17D335CF1F148EAEA778
5DDFD545BED2D18311B27FE> |
7651 <001C60D8A8C9B5EE3165FD03260EE922EDFD5C666BD569D4781EDA9AB6
DCACFF97E636932D1DBECE6D3E0E22CA9ED999B56F30602C757136BE30F0BCD6
F0F8B66E2E0E2C59FD816B2B0F832F233BC96FE1A5E078DD5D029BD2EFA82A1F
AB27155EABD88B6F6A599F152A6EE60D80CE51E8EDE0E20E5503813C596A3122
76BECDF48BC1F0AEFB12CF11F756526F133E62B5C648052B504EC589ABF59981
85A4E3A2C6BE8F6A125AA2C310868A46A68F73972DA8AEAF9269C82989D17DFA
8337CCA242DECA9DD108DB19D46398> |
9775 <001C60D8A8C9B5EE3156276F0828238E1CE49CEA4908134B3EB17B70E2
31A0B862949F4FC6004B0D4CA97A9D5BCBCB5D3ACF0D7A19EDDB49E96CC59A7D
DD1880B0BF897DE1D27654AD218955BC90B771C4476E5293320140120AFCD590
49C3511894F78074401DABAC3FB2E9947F13D159859C806EA27E4C2E8D58455D
7CB3FEFE95979D2445F6471F68D34401ECAF0E2514FB7C03356114F217542845
B6EDD828F95D3FF3B29C14E3C2BD8F96B72AA79436DE1A8D520F110458833101
07BB62C5B0E2CA425E2836E783C2E56684CB9A1BE8C3F43DCD4CD4A9B8B300EE
D92EC28C93694C5EDE37E831C83ECB8C8113AC135E267A6805A0B71F1EAB1F2A
959C72B14A0FD96AD9CCAB43B45AC9201442263CFC390D460D2E48EF84492087
68C281AAFA166BEDCE9EF17221DE46CE43C9FDD542986766EA0DA042AA2E939E
3DAD9EA78EA6A708E940BD7975947B4C0F16C26EB6C6493779B8E9000754BB5B
697B2A5F7342E3CC69677C78D9E900108949BAB6B0BF425312897C2074DEF864
6941578FFE31C7BC6E> |
9791 <001C60D8A8C9B5EE31029BA1C0A971EF8FE6150FD67572D837B048C8C8
B88C72E79FF2781FBFB2E991DA6AE7AD56D72C76D31712C26D9224AF0E647D2A
A400B0FDE1C53659D27D07F0E8958301CAE7B0AF8F440FD8DC874B6B68AC17F8
41BAF50DBD55FA2DD4E8042F24ED03414ABDF34220314E5C5905E3DC0B1F7331
7189569555C872214983ED10828EFA67CF61F1FE1344BE40D4AD2768CEA88F2E
35481179EFB4B5E22C23DCC6579F52BA911B303B69B1B747B3165855E00443F8
A6ADD27E26DC3DBEFCD1379AC3C6E989CA4E9359B63701E7D6551B866EFA9451
5AE561D96439AE2C506E68B7B18A38DCBF7D8AADFD69B0A5208C1E2D52572D55
8C0413A5022FEF1E134BA667A5D4403A419AD4D63741AC> |
!
end
end end
%ADOEndSubsetFont
/UKGMMB+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
-399.322 33.0163 mo
(2\006\035\343&/&?)sh
%ADOBeginSubsetFont: UKGMMB+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/UKGMMB+DengXian-GBK-EUC-H 4 GetGlyphDirectory
11775 <001C60D8A8C9B5EE310D61CECD04DC1099AED614A27F66559AFF71974
2CD7B9312FB8D781FC9CF95796F308240E41DF2CC913B29F836E8787A7C75995
8C17C8BC7026FF05B883E19AF1E2B00B8E14C9CCA3E49CDF8DF6FF4722A2B00C
A99D01AB57847CA54D1417FB345935C9924A197530DCAF11D76D308270E33949
5CBE4AFD32237A9DB346BF6178203AB9254314CD5E93EA4F811DBC8BA6B8CDB2
F0CA1AD909FCA4B95D354EB5411EFDB6FE1121896B5> |
10442 <001C60D8A8C9B5EE310D101E4014B8037A933398D67105F7A876012FB
C849D8C3708C3E853093B3A2EAD1CAD2B681F22218DEB017D67F8F7955709B6F
7AA25F5D2BD0CA5EEDD3081E9B21DC945E24C4F83752C49607C0F0F1E987797B
503478D16F87E894C74266A30AB42404ED71726F97850E7DF0156431C7B33245
8601501FCEF2F3BD4AD1180ABCE5731446CC8A81EDB73FC8C5894E4607E459A2
B3758D034BF1D0D05FA5FF2CAD7D51BEF26ED010EE2032BB471584DA2E6DD2A4
3DCA7D4423D43A131D60F37C5A16AD191128E92DE346C600EFB093081B2B2EEF
4CBB11801CB4E92E1E5FF56A5FB04EDAFA21605B34FEAAC2177D06E4ACF32DDA
DD51BACC8E5533409408776C9AD98D72AAA4B1EE26DA585940E7B13423C7DE3E
DA92374DEAC27B51BC479DBF6175D1084310C10A6D0D2C7581BF40E4D71A6AB0
70DF5D9BB6306A9C406F43820E17F17E42DE787EFFC06B823EC1D57B56207866
FE07160CF68453884FFBA7BE51298DAAA8ABF5E5A0CCC410DA217B70C7CB2769
443FD579226121FE894> |
7904 <001C60D8A8C9B5EE311443F0FD0F184B810512B2E90827219B300EDBD8
226D3977BC57B7206F9178D8CCEACA707987C205D04B8829CED5441CE9D6BA3D
7CB2A34B40DD7106C08A3ECDE8C8999D8A8FB63E838D12D9A2FDAB901D35A1C4
966D808C4AD501C4679E1F642AC34383A791A6F1D8840D94BC6584AE4953AC2E
4C6F9ED4F474FA21097657AD40D7DE2C0876FE2A56A83C196937A38DCDDAA2B8
853E748547226C52C96AB35D24AE4237B147A8B7244F76344C48D3D12B08D3FD
577C5C9C9687B290795B46A00E6A1D5F1D47788228D9DAE307CFA95EFE2AF045
838934B52B25CBA20C51C976A93C6F3B341DD1FADF613F83BA464C1E078DA258
610B367CDDA2AF956F2F8C4FF2C187A02A9AF952BA62AA68E1AED5EF2C6CB2DC
A20F565619E5D46FD6432C3C983911681150361AA811F1DA0F3F06600A1AB868
25A8A9BB5DC2759A49D2504BF18A619B7310> |
8950 <001C60D8A8C9B5EE31021E798C1CB3E10E8EBC83617BBEF59271E00FF0
E2ACA4A6451AC642A8631181673E50591544D12743514D0EA22AC559CAA11F9E
2DBC4BBE7B2C5AAF364C771D1B7DD11F5CB93249DDF8ECCC7084C888455E347F
2056D872EB7C8C3153EFA2AB9F8E2B090A93B5AC3A819160D5C94832DD834C72
F8361F9E4F832F829C4C6E67B0B0D4079642B43143A53B88BAA85006702901B4
6FB984638A348170A3DDC73CE0F431EADECA7CE87F47B1D7D4EBB1CA167F6D99
570A78CA0B538F29ABF8A3A7CE3E72AE2BE272F8639BD7B46B4A044FE7AB557C
CD79C5BDF1123D8823F502FA951BEC5D> |
!
end
end end
%ADOEndSubsetFont
/UKGMMB+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
-399.322 52.9963 mo
(-\377\(\312\036\340"\366)sh
-324.972 77.8763 mo
-403.142 77.8763 li
-403.142 78.8763 li
-324.972 78.8763 li
cp
-402.142 75.3763 mo
-408.142 78.3763 li
-402.142 81.3763 li
cp
.770321 .559594 0 0 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: UKGMMB+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/UKGMMB+DengXian-GBK-EUC-H 2 GetGlyphDirectory
19922 <001C60D8A8C9B5EE3145471278B072BADEFEAA4336C61FD208E46387D
252DE0B66A3F173FB3C7644F1C2964578911C26FC3880D3DB1CE8FCBE0AD6E59
4B533F851CB3E559B573CD1ABE662F74BA279A40E7F131EC710C4D93A989889C
0D7F8BE2900BB95D17195172F6C4CCEFBF6D035DCF6BCC0569286D2CEE4274EB
70AC4A83C2723FF00FE52FB9B2318DCAD634627B9D41245ADB10F4F6BCBA3C63
E9D56952B2E2022FF1DC22326535225352A96A63FE501BAFC1119CCA64812B89
2770DFF62F16500E22E89CE1D11BF7A5774BB859BBDC9595E8D7F30ED6D06BD7
E6FD3FABFD2525E0170ED8429EA72B2A05D7258F91A2C3735E4395BA9F30D700
4363E6D117A4BFBE2D7FAA5F150BDB51291E647B71C3F14F2D3FA8FA4CC68288
AF2B7ACD36BE24115736120A94FFC9AE6405D9339DCAEB9A4B9063DA94C43963
039CE2EDC3601B964F08E8ED97B2D78E0F422F796FCA0727174E6145CEE5B63D
518C468748BBCC304936F6D57B3ADC7838F16AC0C539FF0662CB1328EB88094A
E674B078C4E9AFC5C0E7C1C7AFC3B0DCBE83F40D7BF7B3420BF3346124285901
BB24613A70903B29B287F> |
13918 <001C60D8A8C9B5EE310D06FA91520124B060DB64574F1EF713CFCD79A
C4037E6D58EE69B8458BB660FD0E9498F272EE276056328B6239A1BC74ECB5F8
4579075F5FF7467C128DFCA2C348A8001151C2F8CF971E20419F5F35542F4E58
12535FEEA87145FFBDF44F3FEAAD4D03877D1F512C749F7029D1B548AB24C15B
94326C7DF3C0475082F0816CCB248233FBD7105012216DDD36F491ECA70D0A7B
8E562DD1F4C4164CC1ABF6CDFAD41CC39A8D9F15BC0D34EC678BE1932FE9A4F4
690AAD10B8CB8140D44CE2D7DCFF6C9DD246CE040488F8FF26A0200A79CC8E62
0099459824C0057D77F47E011A0A13304EEB7AD37C91C9FF9328FB4970A5905B
E06D463D62FF38F70C3B8D7D195BF4FA62051AB9D387A40C5515A94FC> |
!
end
end end
%ADOEndSubsetFont
/UKGMMB+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
-399.322 77.2163 mo
(M\3226^\036\340"\366)sh
-321.412 159.406 mo
-218.752 159.406 li
-218.752 99.7663 li
-321.412 99.7663 li
cp
.770321 .559594 0 0 cmyk
ef
-321.412 159.406 mo
-218.752 159.406 li
-218.752 99.7663 li
-321.412 99.7663 li
cp
.923095 .755032 .159182 .0290837 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
/UKGMMC+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
-286.862 124.796 mo
(o\334p\001p\006p\007p\005)
[4.44589 9.90005 7.30811 5.72388 0 ]xsh
%ADOBeginSubsetFont: UKGMMC+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/UKGMMC+DengXian-GBK-EUC-H 2 GetGlyphDirectory
28674 <001C60D8A8C9B7FE5AD20AE56213796D50B188B2C5CBFF678B1A9D104
AF97FCBEA6169C9DF4E313B2A55EC833C42B1AB0E8A13DA65F86C2C2AEDEA104
DE02E7F576D982DF30B78FB76CCFB07A8EB8179B2F3818BC620295E8F285682C
058E01E22BECBF493516051F07EB2FFD039B1F2347AD2EEC2F8D2F7E17A3B95F
D9B5890C6237E6820> |
28663 <001C60D8A8C9B7FD849E053B577F0EC76167B9364DDA2AA91631C3CFF
8DC23E0BF6538C74A911385270AC07DCC593E92BECBB696706EF8F8C1C4CE2EF
8295729E284A84BB380C6F5C037CA541C9414BC119A0C6BC7171A44F4E2D24AC
C188520E6BDD194B2F3287711D10FF61B4853208E1CBD0B94B4B63BC29FDB45C
C26906A021B80EDE97A058C4DE4036DD68F93905E608AD84B6128CEEED8DF392
1CD2DB7F4217EEE2DC9> |
!
end
end end
%ADOEndSubsetFont
/UKGMMC+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
-303.002 146.396 mo
(o\327o\370o\366p\002o\367o\370p\005)
[12.3841 9.25214 8.15405 10.314 10.3321 9.25214 0 ]xsh
-139.482 124.676 mo
-213.782 124.676 li
-213.782 125.676 li
-139.482 125.676 li
cp
-212.782 122.176 mo
-218.782 125.176 li
-212.782 128.176 li
cp
.770321 .559594 0 0 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: UKGMMB+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/UKGMMB+DengXian-GBK-EUC-H 1 GetGlyphDirectory
15424 <001C60D8A8C9B5EE310D6E459E8B1ADA3AAA093297591B9CEC442F449
1FD627AF81A659972173650941597031D06E1F910841CF919A17AEC33EFE5F95
062C2316D989051E93B6CC0AC29ADBB31408997F19B43A56791E6B924FAEF503
74A3CC6E2A77A78B7D95AE15B6889EDB06426EDE6D8A50E1E930024F0C7A4656
93636E7A2B0E7A0041C1ACA00C2868EDD90E07DFC6ADEB3ADC005247644057FB
271FF98447A4CAFF902F4D983411E16B7927A2B82506AE950C072CB9BE27E4E7
46E9EECB813AAF601B223031C0107612D35D9214D4B0F27D2FC3AEDC7221B256
40FDF2374573F9E62F79260A71B7B402E3DC5D977138C04128AFAB1AFC2673F8
5E5A3B41A92EB756B6AB5ECCE286C0D3542418FC51BA8EBCCBC342FC956492E6
5227CB665409AA7E8F4E7B7C7CD1BB99495A50911739758AFE3948128BF1F612
B1544C5E7B318D6D236FEB0F532DA4CE2D095C93CA9C7C9C961C148F02BA2B38
3F38DDD359205BC6C70927BA5039E0B4B9FA834EA412809EA8D53F498EC8226B
359133AA0F0B20B13FEF35986881A23153B6DE7FAF38D8ADA1EFAEF4E6F2D416
4281522729585B1CD610183C8AAE63EB4C5E3541473E21DE57759814B15C9FEB
AB33FFCC097A5FEFF867C147C5F3E2E41D6E158743533A7788EF9765002DC813
5675B4C18ED6A7A4AA555> |
!
end
end end
%ADOEndSubsetFont
/UKGMMB+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
-200.402 116.436 mo
(2\006\035\343<@)sh
-218.782 51.6563 mo
-178.632 51.6563 li
-178.632 94.7163 li
-179.632 94.7163 li
-179.632 52.1563 li
-179.132 52.6563 li
-218.782 52.6563 li
cp
-176.132 93.7163 mo
-179.132 99.7163 li
-182.132 93.7163 li
cp
.770321 .559594 0 0 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: UKGMMB+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/UKGMMB+DengXian-GBK-EUC-H 1 GetGlyphDirectory
8917 <001C60D8A8C9B5EE310229BEB6DA829A6ABD7D4C500F895B740F232EA2
6490AA58AF1FD88AFB10E900ABB9ABA3891F151790BE6B7539976380D6ED826C
EEFB6D25D9D21015DE69D41FA3782C13DAEB135D9116B9A4F8BF8270CCB5D89A
6155AE2D4126264AD1565C098D935D1AC8027C3AF4D52E54DEFAC8F4E74D2745
B638A24511436E59F1065094C78B9184CC7301CCB0589E3AD022FAE922BC542A
D3092A1725D5E55E4E4F5A4CE63882A7D049FE2682F16A4900B754A24E0FA977
AF9084D60B8A7443D741B970645270A43346D6D178497811391BE494C9D753D9
61B7774E81AC2D6106EC40BA88723811FFF0DD32016179201515B154A81F3870
0EFA2B220DFC84B0BFFDAD022704B64A9E76046D739117BF143F223EC38F5BC2
80AC0960100EF3> |
!
end
end end
%ADOEndSubsetFont
/UKGMMB+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
-198.742 44.6363 mo
("\3252\006\035\343)sh
-277.372 246.886 mo
-174.772 246.886 li
-174.772 187.726 li
-277.372 187.726 li
cp
.770321 .559594 0 0 cmyk
ef
-277.372 246.886 mo
-174.772 246.886 li
-174.772 187.726 li
-277.372 187.726 li
cp
.923095 .755032 .159182 .0290837 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
%ADOBeginSubsetFont: UKGMMC+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/UKGMMC+DengXian-GBK-EUC-H 5 GetGlyphDirectory
28660 <001C60D8A8C9B7A66FF208F1FFFF199CBF15DA40789B41A8940D81C59
F2725073E42964675E0DD202817D399E2FB17DEF0CEC97867EBCB7ADAAC507C9
72A055AF41A6B42F3641829E4746E9DE8C8DEC7FAD6AFE6EBAF1665BBE8EA5B5
A4B9F141EB4692A8EBE22B205223CA91FA890F02D7332206F1E0DCBF993E8459
4C8743CFA4B5ADE36A0FB102061281D6EFB1A65732FABB4B70E2A43CB34852E4
67727B0E2BBD33CA8A301D3BF82124C> |
28595 <001C60D8A8C9B8581AA5> |
28629 <001C60D8A8C9B7ECD94E209CF2E001D5BD73F2D35607F6F9CFB8183DF
05975139416B10983007BAF37315FB80AF3F59A7AFD6F4F1B834AE085B526220
6D57D2525DF8F938763EDC8C63383C21ECDFE5092FB02C978A1A94F951D9B028
E65FC2284B0FFC51184F29C0959E7954453AB3D017B2FF221846C842BD6C3E1F
1DB394CFA79FF0D9FB9240F77F3981762AF037B68A10511FE361698819099> |
28680 <001C60D8A8C9B794D31A1053B9961E70BFFA47467F8C115DB76858BE9
1B87F72C52941282A1449AD31A6C6FC3341ED63E1F429CA97F8F026C9971DD20
E5603656286CABFF4097310E86D85B7B38F800E217098445F68487CB3737B3CF
9E030780CD291611690AE824EE2> |
28665 <001C60D8A8C9B844FACDE1262E660876C1C821F09A376508ACC1A69E7
44CCCB7E78648AFF64E5A36538462D4E62DC3E4EB2C79A256CD068EF675E11F5
BEC65134909B1991756C0B348400205629D9A2DBF4EF5> |
!
end
end end
%ADOEndSubsetFont
/UKGMMC+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
-269.542 223.316 mo
(o\327o\364p\007o\364o\263o\325p\010o\371o\371o\370p\005)
[12.3841 9.01814 5.65187 9.01813 4.93204 10.0621 9.91791 5.29211 5.23813 9.25214 0 ]xsh
-395.812 248.086 mo
-312.652 248.086 li
-312.652 188.926 li
-395.812 188.926 li
cp
.770321 .559594 0 0 cmyk
ef
-395.812 248.086 mo
-312.652 248.086 li
-312.652 188.926 li
-395.812 188.926 li
cp
.923095 .755032 .159182 .0290837 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
%ADOBeginSubsetFont: UKGMMC+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/UKGMMC+DengXian-GBK-EUC-H 1 GetGlyphDirectory
28632 <001C60D8A8C9B7A4C86C58826A7CADEB7B0D78D3A58A13CDBAB0CA4F6
979882BC86A42E2AD85808956602D9668> |
!
end
end end
%ADOEndSubsetFont
/UKGMMC+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
-367.462 224.516 mo
(o\343o\330p\006)
[9.93604 9.05411 0 ]xsh
-172.792 216.376 mo
-167.322 205.426 li
-167.322 211.866 li
-144.962 211.866 li
-144.962 205.426 li
-139.492 216.376 li
-144.962 227.326 li
-144.962 220.886 li
-167.322 220.886 li
-167.322 227.326 li
cp
.770321 .559594 0 0 cmyk
ef
-172.792 216.376 mo
-167.322 205.426 li
-167.322 211.866 li
-144.962 211.866 li
-144.962 205.426 li
-139.492 216.376 li
-144.962 227.326 li
-144.962 220.886 li
-167.322 220.886 li
-167.322 227.326 li
cp
.923095 .755032 .159182 .0290837 cmyk
@
-311.692 216.376 mo
-306.222 205.426 li
-306.222 211.866 li
-283.802 211.866 li
-283.802 205.426 li
-278.332 216.376 li
-283.802 227.326 li
-283.802 220.886 li
-306.222 220.886 li
-306.222 227.326 li
cp
.770321 .559594 0 0 cmyk
ef
-311.692 216.376 mo
-306.222 205.426 li
-306.222 211.866 li
-283.802 211.866 li
-283.802 205.426 li
-278.332 216.376 li
-283.802 227.326 li
-283.802 220.886 li
-306.222 220.886 li
-306.222 227.326 li
cp
.923095 .755032 .159182 .0290837 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: UKGMMB+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/UKGMMB+DengXian-GBK-EUC-H 3 GetGlyphDirectory
8942 <001C60D8A8C9B5EE31031154B615742F1DAA80CB5B5A06DB3018438022
143CBCE708D5DADAF44B39292721DB5E396A74E4B589796E3B9CFC76197898A4
A21049407DBC3A4F7D695D6911F17AAC040352AD0A869BB7CBD6277A7151FD8B
C515430274242DC1C877C7533839527BBC23321DB667F5DACF02B04714CB7BEF
B3A2CF759AB9942AB77D03C6B795F88A3CF57F51158EEAF39C678F891DF69020
B0F415B6BB45250FA4DE68A26ED2D813B071966F90082D1861D9288F862E89DB
F86DFE> |
7468 <001C60D8A8C9B5EE31028434C4D6C30C64DF1C96B7E46404E90C2FA9E3
8488C286DD13DCCADC3A0AC855704BE521DFFEEF8C2FCC7041C780932D31D84C
64663717C7BDC9EC5CDE9EE4785DC1293B522116561533EAA4CF35E326ED302E
FB1E78D291DCB210CFB838D87A23CF01ECE388435919AD440336B2190CFF0AAC
9CCF40DFDA7BA855F0025635224377A8E04BD4F921C208D72A51CA69C5A20B6D
1714F71EF327303F4E298F819B27A7302BF7551867> |
13484 <001C60D8A8C9B5EE310D33E6A7EBCB349A0D890EEA2DB541738A01E14
E34AA2B52532C85667319E048DD5F6580E7AF747AB1659197020AB9F6EAAA334
E5E0D7E5690B263F7C4555A53DF47C84EA1320C6A3F471C8E491F6DAAB4F3EEB
4252EEC865C8B8E38506F581EB6F4092C88F67CB6D98C2FBD35EE100A67E40E1
683A5DF3899E44E9696871EF8D944FAADAD431E4956C203A8E4D437F0BDDA51A
803ED2EDA395CCC27B477FCF7044C89D037168912871AE5B151AC50FE7A10901
E1D5E39E1CA227A7ABFF5A06E1B1CD341FB5F60089B976C9F78146A2A0D3DF5B
27A420E1F252515B96C8ADF22E3AA2B5BFF5DD149C76FD91A22A7B5FA876016C
9FBE44FCF49A43547AEC1ED5A64806F97A3CD69375CCC4AA351016DEE0A6B314
903F822777ED4B91F1F7D389C1F0AD75A77F8DC6202DE5C52AEBC81890DD8C07
944CFA3D686C761CEBCCF24BFF01CE3CE1269E802C6F625588B712FF29B74D42
2ECE8D09C2CA505BF59689A070E0C70FEC13C59A31CB388EE277E6C8D400761E
BAED9F1A3003D69CB57AB9D318CF05DBC9A64A1D039C77FF1CF99B287D4E7E96
FB06626640D72DC2253EF1070CD01C135B4270FCF5E47D287D25F37F06668B79
231E9810FE1FC6D0AA742115958DF205472C2FC> |
!
end
end end
%ADOEndSubsetFont
/UKGMMB+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
128.318 278.496 mo
("\356\035,4\254!\237_\036%g6\2656\203)sh
335.888 246.886 mo
392.828 246.886 li
392.828 21.1663 li
335.888 21.1663 li
cp
.770321 .559594 0 0 cmyk
ef
335.888 246.886 mo
392.828 246.886 li
392.828 21.1663 li
335.888 21.1663 li
cp
.923095 .755032 .159182 .0290837 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
/UKGMMC+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
346.778 140.016 mo
(o\327o\327o\345)
[12.36 12.3601 0 ]xsh
9.96814 247.426 mo
66.9081 247.426 li
66.9081 21.1663 li
9.96814 21.1663 li
cp
.770321 .559594 0 0 cmyk
ef
9.96814 247.426 mo
66.9081 247.426 li
66.9081 21.1663 li
9.96814 21.1663 li
cp
.923095 .755032 .159182 .0290837 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
/UKGMMC+DengXian-GBK-EUC-H-Identity-H findfont [18.02 0 0 -18.02 0 0 ]msf
28.8382 140.276 mo
(o\343o\346)
[9.96008 0 ]xsh
213.848 81.0463 mo
299.108 81.0463 li
299.108 21.9463 li
213.848 21.9463 li
cp
.770321 .559594 0 0 cmyk
ef
213.848 81.0463 mo
299.108 81.0463 li
299.108 21.9463 li
213.848 21.9463 li
cp
.923095 .755032 .159182 .0290837 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
/UKGMMC+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
239.718 46.6963 mo
(o\334p\001p\006p\007p\005)
[4.44592 9.90002 7.30811 5.72388 0 ]xsh
/UKGMMC+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
235.698 68.2963 mo
(o\331o\370p\007o\366o\373)
[8.58612 9.25208 5.72388 8.15405 0 ]xsh
69.7582 36.2963 mo
203.258 36.2963 li
203.258 37.2963 li
69.7582 37.2963 li
cp
202.258 33.7963 mo
208.258 36.7963 li
202.258 39.7963 li
cp
.770321 .559594 0 0 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
/UKGMMB+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
80.5981 29.9363 mo
(2\006\035\343&/&?)sh
%ADOBeginSubsetFont: UKGMMC+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/UKGMMC+DengXian-GBK-EUC-H 4 GetGlyphDirectory
28612 <001C60D8A8C9B78C66ECFB0787869A9A1A23E44B3E9AC19DF9D3CAD17
2DB0C5BD42A48D92FB57C46F18F7186> |
28607 <001C60D8A8C9B89100E29774725B9AF77F3AE651C9530684501EEF93F
9A1EE95508D9A5441CEC60FFE9A27C4> |
28613 <001C60D8A8C9B78C66ECF39464E4C36A41875CA13B3F1084BE95AC3D6
B174FBE334F26768C74B2ECC4CAD6BBADA966160EFCC7F2747E70E0119D6AEC1
B017FF7666859BBB2EDC8A44058072DB251CD7C890E5801C60DCDEC2DC5E66B6
27F3C4E46C8D576EB2D7BE3EC5C6EC7CA35C52158FC62F188AA92F4A597AA61B
2CBCDB07E050E80BB022F1A82> |
28614 <001C60D8A8C9B78C66ECDB6140BE188B7AE32EC2E6019387F28A4D7BE
FD974FECF9A6F435E80E22F5012EC52C00C178C2C2233F0B02C6B10EBA64AD22
230138C4945FB4B066D7E42C2C6EFB71864F1E255E0A8537DA22ADB3D546CB61
607C115C7A490FEE823B22C59C8C165CEA3BA45F26ED3655E00609C70321AC2E
2A2A318B590A3969C48D77B80570739FD2C391323D888FB7CCA532472D5F05C1
B478B862C545672D9550E95CD5D79AEB7716096AD08C7A6D17AAF6F6AA3FE1AB
AEC80F85A> |
!
end
end end
%ADOEndSubsetFont
/UKGMMC+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
136.518 29.9363 mo
(o\304o\277o\305o\277o\306)
[7.36737 3.06152 7.36737 3.06152 0 ]xsh
/UKGMMB+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
80.5981 49.9363 mo
(-\377\(\312\036\340"\366)sh
/UKGMMC+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
136.518 49.9363 mo
(o\304o\277o\305o\277o\306)
[7.36737 3.06152 7.36737 3.06152 0 ]xsh
205.858 74.0963 mo
86.2181 74.0963 li
86.2181 75.0963 li
205.858 75.0963 li
cp
87.2181 71.5963 mo
81.2181 74.5963 li
87.2181 77.5963 li
cp
.770321 .559594 0 0 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
/UKGMMB+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
78.2181 88.1163 mo
(M\3226^\036\340"\366)sh
/UKGMMC+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
134.158 88.1163 mo
(o\304o\277o\305o\277o\306)
[7.36737 3.06152 7.36737 3.06152 0 ]xsh
78.6082 170.806 mo
163.688 170.806 li
163.688 111.166 li
78.6082 111.166 li
cp
.770321 .559594 0 0 cmyk
ef
78.6082 170.806 mo
163.688 170.806 li
163.688 111.166 li
78.6082 111.166 li
cp
.923095 .755032 .159182 .0290837 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
/UKGMMC+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
104.378 136.176 mo
(o\334p\001p\006p\007p\005)
[4.44592 9.90002 7.30811 5.72388 0 ]xsh
/UKGMMC+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
88.2382 157.776 mo
(o\327o\370o\366p\002o\367o\370p\005)
[12.384 9.2522 8.15405 10.314 10.332 9.2522 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: UKGMMB+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/UKGMMB+DengXian-GBK-EUC-H 2 GetGlyphDirectory
12646 <001C60D8A8C9B5EE3102A822048A8CE583800F670A6675F44F326EF30
72729D80F9B5265BA59FA29A067CF4B92C870CE7D372C92EE815C43899A27E89
DD6C09B7953E05C434785CF27DB9873E892CDCBD409AA268062770DED1B2A9F6
AA24845742A6DE93C8A19683E4CDB249F620F4D5B829086469C013EC5562E020
397C3DE9F34B5D034C2629D338F4C75470FCC63710BA328221272F65F72EC282
EE5FCF5C7E9E06F9009C4CCF64B15E7C27CCBB04EBBD90057367B24D0FBA371B
C5C273C994C4D258DE843495143678DD7F1FAD2E8473F7711BEF73D565160733
2C18DFDABD7D5BB7E09C262B2BE5E9723797AECDD83C089E7EBB3E135FFDD59F
32E2DA89B18B58E76742910A45FC23612249B1205A5E12D90669C5611FB9308E
87F6F058D9FFDB98F4A35B8468DE0D7762A9B9CF2A05EA8FF59544164305BF94
17BBBFFCEA1E82E9EBE0A9E04B5CB0EDD1D582BF79941BD1848EC1221B215F93
7962FEC9829D976070E5C13FA602F8D730EBFDFC30D75DAC375EE475097F480B
37A34C9F78F3DA3DBD7A1D83CCDCAE7DE4FB413A2ABC93B57885CC681599DF0F
57101FF7DC0581D2A531E> |
22347 <001C60D8A8C9B5EE31436D1BB7AA05197A77F0EE095DA9AF38490003B
02E6901545FAFF928E9BE8B9586887BC8CCC6352D4F0386D987E6F884CF5C743
46EB1B955A55CC695AB4835999D5048BEE4C36E44637739B0EB814E153802EE9
F570CFDEC584BDA1C30B26DD68BA25A738A28616062118E7451B84D550B265EF
C0D68D04F6630FFBB598EC331CE5D25F523BF0867486E14174610340EF56A8B9
5A68A4520C943E2A7752D77DFB91F81E7C92D58120B28BB22DB837138D759914
60345FC5481C8666ADFE610B59B50F064212886BE6E84A946A6EED4D9DEF77F8
187ACB4316865F77229D40791B5014B5DE92D5F44F90D376396AB51822E2386C
6FCF98B69017ECC5C50096423D2E150D8E65B39A3D64864F8533B79F88146> |
!
end
end end
%ADOEndSubsetFont
/UKGMMB+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
154.458 106.756 mo
(1fWK2\006\035\343<@)sh
197.948 246.226 mo
300.608 246.226 li
300.608 187.006 li
197.948 187.006 li
cp
.770321 .559594 0 0 cmyk
ef
197.948 246.226 mo
300.608 246.226 li
300.608 187.006 li
197.948 187.006 li
cp
.923095 .755032 .159182 .0290837 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
/UKGMMC+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
205.838 222.616 mo
(o\327o\364p\007o\364o\263o\325p\010o\371o\371o\370p\005)
[12.3841 9.01807 5.65192 9.01813 4.93201 10.0621 9.91791 5.29211 5.2381 9.25214 0 ]xsh
79.5082 247.426 mo
162.668 247.426 li
162.668 188.206 li
79.5082 188.206 li
cp
.770321 .559594 0 0 cmyk
ef
79.5082 247.426 mo
162.668 247.426 li
162.668 188.206 li
79.5082 188.206 li
cp
.923095 .755032 .159182 .0290837 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
/UKGMMC+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
107.918 223.816 mo
(o\343o\330p\006)
[9.93604 9.05414 0 ]xsh
302.528 215.686 mo
308.008 204.706 li
308.008 211.166 li
330.408 211.166 li
330.408 204.706 li
335.888 215.686 li
330.408 226.666 li
330.408 220.206 li
308.008 220.206 li
308.008 226.666 li
cp
.770321 .559594 0 0 cmyk
ef
302.528 215.686 mo
308.008 204.706 li
308.008 211.166 li
330.408 211.166 li
330.408 204.706 li
335.888 215.686 li
330.408 226.666 li
330.408 220.206 li
308.008 220.206 li
308.008 226.666 li
cp
.923095 .755032 .159182 .0290837 cmyk
@
163.688 215.686 mo
169.168 204.706 li
169.168 211.166 li
191.508 211.166 li
191.508 204.706 li
196.988 215.686 li
191.508 226.666 li
191.508 220.206 li
169.168 220.206 li
169.168 226.666 li
cp
.770321 .559594 0 0 cmyk
ef
163.688 215.686 mo
169.168 204.706 li
169.168 211.166 li
191.508 211.166 li
191.508 204.706 li
196.988 215.686 li
191.508 226.666 li
191.508 220.206 li
169.168 220.206 li
169.168 226.666 li
cp
.923095 .755032 .159182 .0290837 cmyk
@
214.028 169.966 mo
299.108 169.966 li
299.108 110.326 li
214.028 110.326 li
cp
.770321 .559594 0 0 cmyk
ef
214.028 169.966 mo
299.108 169.966 li
299.108 110.326 li
214.028 110.326 li
cp
.923095 .755032 .159182 .0290837 cmyk
@
1 /0 /CSD get_res sepcs
0 sep
%ADOBeginSubsetFont: UKGMMC+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/UKGMMC+DengXian-GBK-EUC-H 2 GetGlyphDirectory
28628 <001C60D8A8C9B67106DCE06030CC378319F03DC2A59F29632BE590439
740FEA1C4E5B4BC8EED41D08FA67DA3FCB2D66CF5A13D3B752F6A4FC2E722E73
0214184A0DABF55E8F1F230E6A7308577D829465EDDDAFFEF> |
28648 <001C60D8A8C9B64EDFFBE0529FE7BF73E7E4EE06B059C6F43BFB8CEDA
2D6CFA48E52FCC5206BA141F46320F79F8572BF0C11B6917E6E3CF5165E69B4F
B8EA861A538C262D5BEDB8BF3F05B9CF822550090B2410DBE96E5> |
!
end
end end
%ADOEndSubsetFont
/UKGMMC+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
242.638 146.156 mo
(o\334o\324o\350)
[4.44592 11.448 0 ]xsh
240.958 82.6963 mo
240.958 101.536 li
239.958 101.536 li
239.958 82.6963 li
cp
243.458 100.536 mo
240.458 106.536 li
237.458 100.536 li
cp
.770321 .559594 0 0 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: UKGMMB+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/UKGMMB+DengXian-GBK-EUC-H 1 GetGlyphDirectory
8862 <001C60D8A8C9B5EE310D062D34148AC99B3F6E1AEA7465DBFF4332F3C8
A5678AFEF7B74CBA0C98A970DFDB0EB92D532A2123B4C8610C404C9DA1123581
4FBF34D90DF5130AD430DD53D3DC5C4801BB088B102670DBD009F6AB65FD6722
77F32417B25A8FDF370180843DC22FDB52058B299AAA8FEA766DDF4B66E81869
0C5C5EE28A2BC544A5419743D38CDCB3CA74065A5DD2BCC419126968BD3683C2
672917AA2DB30D570DF981B3E1AFF22009C7EA310366305C5E7337D49FEB7F62
79CBAF3316BE1BA19DD50AF90E76A0C7F0FC53DD2835732DAD4BF1DA9F89D3B1
8AE391E422598B09196EF251BD72C4901F315C3FF7BB399A311F55081F869BA3
96ED50123BF9257D248CB11E4203B9BF67B4EDC9602A2CC2CCBF9898BDA87CDB
B28D1A8AA5D031A078397BE2DE009A6043B795E9D3B40BA32328813C98999A4F
367188931888BD0CFE97F88B4C57154CBEFA751EF49AAE8746DA8FFC> |
!
end
end end
%ADOEndSubsetFont
/UKGMMB+DengXian-GBK-EUC-H-Identity-H findfont [14 0 0 -14 0 0 ]msf
263.618 101.956 mo
("\236\(\3122\006\035\343<@)sh
335.828 118.316 mo
307.498 118.316 li
307.498 119.316 li
335.828 119.316 li
cp
308.498 115.816 mo
302.498 118.816 li
308.498 121.816 li
cp
.770321 .559594 0 0 cmyk
f
214.048 118.376 mo
168.658 118.376 li
168.658 119.376 li
214.048 119.376 li
cp
169.658 115.876 mo
163.658 118.876 li
169.658 121.876 li
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/UKGMLZ+DengXian-Light-GBK-EUC-H-Identity-H uf
/UKGMLZ+DengXian-Light-GBK-EUC-H /CIDFont ur
/UKGMMB+DengXian-GBK-EUC-H-Identity-H uf
/UKGMMB+DengXian-GBK-EUC-H /CIDFont ur
/UKGMMC+DengXian-GBK-EUC-H-Identity-H uf
/UKGMMC+DengXian-GBK-EUC-H /CIDFont ur
/UKGMMA+DengXian-Light-GBK-EUC-H-Identity-H uf
/UKGMMA+DengXian-Light-GBK-EUC-H /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
