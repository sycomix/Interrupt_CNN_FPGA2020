%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: interupu123t.pdf
%%Creator: Adobe Acrobat 10.0.0
%%For: yujin
%%CreationDate: 2019/9/1, 14:10:04
%%BoundingBox: 0 0 477 113
%%HiResBoundingBox: 0 0 476.7502 112.9768
%%CropBox: 0 0 476.7502 112.9768
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1068 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Microsoft® PowerPoint® for Office 365"
   dc:format="application/pdf"
   xmp:CreatorTool="Microsoft® PowerPoint® for Office 365"
   xmp:CreateDate="2019-09-01T14:07:52+08:00"
   xmp:ModifyDate="2019-09-01T14:07:52+08:00"
   xmpMM:DocumentID="uuid:321241F9-0AD4-41A9-A3FF-1EFEC6399490"
   xmpMM:InstanceID="uuid:321241F9-0AD4-41A9-A3FF-1EFEC6399490">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">FPGA 中断以多任务执行</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Yu Jincheng</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -112.977 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
7.62939e-6 0 mo
7.62939e-6 112.977 li
476.75 112.977 li
476.75 0 li
cp
clp
gsave
-.182991 113.889 mo
476.817 113.889 li
476.817 -.110504 li
-.182991 -.110504 li
cp
clp
-1.18299 338.889 mo
958.817 338.889 li
958.817 -201.111 li
-1.18299 -201.111 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
66.647 -119.781 mo
144.467 -119.781 li
144.467 -158.841 li
66.647 -158.841 li
cp
1 /0 /CSD get_res sepcs
.251 sep
ef
1.02 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
66.647 -119.781 mo
144.467 -119.781 li
144.467 -158.841 li
66.647 -158.841 li
cp
/1 
[/DeviceCMYK] /CSA add_res
.916228 .750088 .15668 .0255436 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XQFBYL+DengXian-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (XQFBYL+DengXian-GBK-EUC-H)
%%Title: (XQFBYL+DengXian-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /XQFBYL+DengXian-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-141 -253 1151 954} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 29235 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 8 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
28630 <001C60D8A8C9B66129408EDE254C9C680856C5C58CDE8931886FD33C1
3032CCEAAB93F031A223E0F10B1688B890AF923FA33D50791F3585DC847E52A2
604D942BE0A76707C2DC7FFDDCEEF612E4CB75103563AA302D73FE057047D483
85B58BB1622EE008969F0F8C1E9BD68AC43409FEAD97A8A1EE29EE86CE1D9D45
843FB75131B> |
28660 <001C60D8A8C9B7A66FF208F1FFFF199CBF15DA40789B41A8940D81C59
F2725073E42964675E0DD202817D399E2FB17DEF0CEC97867EBCB7ADAAC507C9
72A055AF41A6B42F3641829E4746E9DE8C8DEC7FAD6AFE6EBAF1665BBE8EA5B5
A4B9F141EB4692A8EBE22B205223CA91FA890F02D7332206F1E0DCBF993E8459
4C8743CFA4B5ADE36A0FB102061281D6EFB1A65732FABB4B70E2A43CB34852E4
67727B0E2BBD33CA8A301D3BF82124C> |
28671 <001C60D8A8C9B88A65BA90E56DAA1E3841575CB45590D6> |
28662 <001C60D8A8C9B776A06C6FC231F3BF82B95E430F6D347A409EECD485F
9B406FA6336964C8BF7664E2AB055B44D3A06959A7781CE4D2FEDDD996C546F2
2FC5837E64BBC80EF4699966E80B1E4ED4A9C3550A8BDD97A63B0696CF3EE432
A03807D55000A523F2214> |
28629 <001C60D8A8C9B7ECD94E209CF2E001D5BD73F2D35607F6F9CFB8183DF
05975139416B10983007BAF37315FB80AF3F59A7AFD6F4F1B834AE085B526220
6D57D2525DF8F938763EDC8C63383C21ECDFE5092FB02C978A1A94F951D9B028
E65FC2284B0FFC51184F29C0959E7954453AB3D017B2FF221846C842BD6C3E1F
1DB394CFA79FF0D9FB9240F77F3981762AF037B68A10511FE361698819099> |
28674 <001C60D8A8C9B7FE5AD20AE56213796D50B188B2C5CBFF678B1A9D104
AF97FCBEA6169C9DF4E313B2A55EC833C42B1AB0E8A13DA65F86C2C2AEDEA104
DE02E7F576D982DF30B78FB76CCFB07A8EB8179B2F3818BC620295E8F285682C
058E01E22BECBF493516051F07EB2FFD039B1F2347AD2EEC2F8D2F7E17A3B95F
D9B5890C6237E6820> |
28661 <001C60D8A8C9B7FD84953D118AA979FC6C631901144BB02E815F2AD38
C9304AAD5C69BEAA7F87F397A8B68E05A58AAC0AE7365E3D5B033BE3AC489C99
F1A84D26C4414FD9A1B105486BFEE67D38C7D79B5C30E9D2EE19AB4E806BF73B
81F502E722B67ECA466A631456E16BBDB15CD7175C1ACFB9877440AC4934B23E
96968CD65ADBB658B8EEADD2A5CF185829ED50D824179AEBDE1D69054AB218F2
E572E00B798960921609D88F11B3649413151> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /XQFBYL+DengXian-GBK-EUC-H-Identity-H /Identity-H 0 [/XQFBYL+DengXian-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
77.917 -143.07 mo
(o\326o\364o\377o\366o\325o\377p\002o\365)
[8.66753 7.00407 3.13151 6.27706 7.8149 3.13152 8.01051 0 ]xsh
%ADOBeginSubsetFont: XQFBYL+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XQFBYL+DengXian-GBK-EUC-H 1 GetGlyphDirectory
28621 <001C60D8A8C9B89100E2949968BCC9C9E907541FC50440089A34F51CB
B41925106> |
!
end
end end
%ADOEndSubsetFont
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
129.997 -143.07 mo
(o\315)sh
%ADOBeginSubsetFont: XQFBYL+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XQFBYL+DengXian-GBK-EUC-H 6 GetGlyphDirectory
28642 <001C60D8A8C9B6E80D68E03F163684EC4CFF5B1EEF6DF5E6C0C3B3965
3F13C13CE1F9B1EFD11D8817083534665198FD8830755391BBD258AD06368414
8BCE694325CCB6582AB71438D34BF1DB6F8F84CBF3E96B7E66DF6A51951334CE
EC24B11F525BCDA1134AE76B7004670D3BA41F6CCF50687AA283B47E1717598E
6C196BFDE21BC56DB38BA07A7DBB4FEC1653BE0BEB641260387BEF1BA8FE1> |
28680 <001C60D8A8C9B794D31A1053B9961E70BFFA47467F8C115DB76858BE9
1B87F72C52941282A1449AD31A6C6FC3341ED63E1F429CA97F8F026C9971DD20
E5603656286CABFF4097310E86D85B7B38F800E217098445F68487CB3737B3CF
9E030780CD291611690AE824EE2> |
28679 <001C60D8A8C9B82C91E1D9CCF2FA7601C6026EBD33736DF344E87F732
E6204D98A966E57A2BEBF7AABB5C82E1C8966BD3BF60CBD042BFA41F5E6D694B
02FA7FC2341B98FA0788772F503A3DD89703A16E741DB3660B5C616> |
28675 <001C60D8A8C9B7FD84953D11880AD4F37B2510559D37A2059564A2CE2
E16A7500A94FDD66B9E5A19619AACEE642F7128DBE261B121C3C7CC16942981C
D231447F25C4534F5D376D352FCD328019825A63D60C00859FFDC4B610FDC284
CD7F0495A1DC5978D3ED40B7F14741A387BEC5E756DB50728BA11C7FAA4BE6E3
23AF5AACA5CEEA8995FF8194E08068A8A5E046955C8CD8BFE88BBA9F1EEEA2C2
A3AE2D93280F668321E4BB938F72F3C852944> |
28595 <001C60D8A8C9B8581AA5> |
28612 <001C60D8A8C9B78C66ECFB0787869A9A1A23E44B3E9AC19DF9D3CAD17
2DB0C5BD42A48D92FB57C46F18F7186> |
!
end
end end
%ADOEndSubsetFont
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
78.337 -126.271 mo
(o\342p\010p\007p\003p\010p\007o\263o\304)
[10.5829 7.66097 4.44554 8.02459 7.70291 4.44554 4.11015 0 ]xsh
144.467 -69.0205 mo
215.747 -69.0205 li
215.747 -108.081 li
144.467 -108.081 li
cp
.322301 .20795 .122408 0 cmyk
ef
144.467 -69.0205 mo
215.747 -69.0205 li
215.747 -108.081 li
144.467 -108.081 li
cp
.916228 .750088 .15668 .0255436 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XQFBYL+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XQFBYL+DengXian-GBK-EUC-H 4 GetGlyphDirectory
28646 <001C60D8A8C9B7B9B9DE69CBC96F0B5A3AE98D065C1FD7CFAD83FC43F
1290F4F9D34982C14CC513501F9076D4F8907F22AC9522F2896E944B1C90ABCE
1EBF569BE3E67D6DCC89DBF0C52716419D51E2AEFADD36CC19C82AD0FC3F3BA6
123D0BD3A2ABA4E110BF677253E952D076F531E23520FFA1895776A2199512FA
C9BD1336F7E1C8EDFA463D40ADCD492ED3B75F11D80658BD7ABA38DAF43CCBA2
32FE248B15967CE3B652AF643FE11F6C5568129285AEA24CD260CD6D81E569EF
64502ECAABE996CCD635CCC94E3C711D5E8195F3A715AF8260F36A77EC1CE55F
17D20D8E151C2> |
28628 <001C60D8A8C9B67106DCE06030CC378319F03DC2A59F29632BE590439
740FEA1C4E5B4BC8EED41D08FA67DA3FCB2D66CF5A13D3B752F6A4FC2E722E73
0214184A0DABF55E8F1F230E6A7308577D829465EDDDAFFEF> |
28649 <001C60D8A8C9B7D7E8DC0A8F59926D729E6EE4D734E5A5AF737BE16BB
0E38958D10F8202854BDCA8BA9BCF0F321C0DDD8EF7643F3C3962AF09B1> |
28632 <001C60D8A8C9B7A4C86C58826A7CADEB7B0D78D3A58A13CDBAB0CA4F6
979882BC86A42E2AD85808956602D9668> |
!
end
end end
%ADOEndSubsetFont
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
162.677 -92.2705 mo
(o\346o\324o\351o\330o\315)
[7.18582 8.89131 8.55576 7.03201 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
152.897 -75.4705 mo
(o\342p\010p\007p\003p\010p\007o\263o\304)
[10.5829 7.66096 4.44554 8.0246 7.7029 4.44556 4.11014 0 ]xsh
%ADOBeginSubsetFont: XQFBYL+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XQFBYL+DengXian-GBK-EUC-H 2 GetGlyphDirectory
28639 <001C60D8A8C9B74B0CB5DF6C84CF353B772D85B4038C184407812FD2> |
28610 <001C60D8A8C9B7212E9A58E2DDA81747ED27CEEC2E27DE2A6B> |
!
end
end end
%ADOEndSubsetFont
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
22.477 -145.871 mo
(o\326o\324o\337o\326o\302)
[8.66753 8.8913 6.44484 8.66753 0 ]xsh
%ADOBeginSubsetFont: XQFBYL+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XQFBYL+DengXian-GBK-EUC-H 1 GetGlyphDirectory
28631 <001C60D8A8C9B625CE6BD2BE419D5CB815C1CA0C61BA0A2D3DFC3B96F
CF9FB6F9E0519EA65E7C8EC76A179BF9356B2C1F7F4A814471AED147404B13B0
B2776E0D6E4D16A4BBA0742D992692136F6DCF6FD8FBBC1141BFB8994DCD1331
B5CC1B493> |
!
end
end end
%ADOEndSubsetFont
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
22.477 -129.07 mo
(o\337o\342o\324o\327)
[6.48678 10.5829 8.8913 0 ]xsh
147.767 -119.781 mo
225.587 -119.781 li
225.587 -158.841 li
147.767 -158.841 li
cp
1 /0 /CSD get_res sepcs
.251 sep
ef
147.767 -119.781 mo
225.587 -119.781 li
225.587 -158.841 li
147.767 -158.841 li
cp
.916228 .750088 .15668 .0255436 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
159.057 -143.07 mo
(o\326o\364o\377o\366o\325o\377p\002o\365)
[8.66753 7.00409 3.1315 6.27707 7.8149 3.1315 8.01051 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
211.137 -143.07 mo
(o\315)sh
%ADOBeginSubsetFont: XQFBYL+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XQFBYL+DengXian-GBK-EUC-H 1 GetGlyphDirectory
28613 <001C60D8A8C9B78C66ECF39464E4C36A41875CA13B3F1084BE95AC3D6
B174FBE334F26768C74B2ECC4CAD6BBADA966160EFCC7F2747E70E0119D6AEC1
B017FF7666859BBB2EDC8A44058072DB251CD7C890E5801C60DCDEC2DC5E66B6
27F3C4E46C8D576EB2D7BE3EC5C6EC7CA35C52158FC62F188AA92F4A597AA61B
2CBCDB07E050E80BB022F1A82> |
!
end
end end
%ADOEndSubsetFont
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
159.477 -126.271 mo
(o\342p\010p\007p\003p\010p\007o\263o\305)
[10.5829 7.66096 4.44554 8.0246 7.70291 4.44554 4.11015 0 ]xsh
230.387 -69.0205 mo
301.607 -69.0205 li
301.607 -108.081 li
230.387 -108.081 li
cp
.322301 .20795 .122408 0 cmyk
ef
230.387 -69.0205 mo
301.607 -69.0205 li
301.607 -108.081 li
230.387 -108.081 li
cp
.916228 .750088 .15668 .0255436 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
248.597 -92.2705 mo
(o\346o\324o\351o\330o\315)
[7.18582 8.89128 8.55576 7.03204 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
238.817 -75.4705 mo
(o\342p\010p\007p\003p\010p\007o\263o\305)
[10.5829 7.66096 4.44553 8.0246 7.70291 4.44553 4.11017 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
22.477 -79.6705 mo
(o\346o\324o\351o\330)
[7.18583 8.8913 8.55575 0 ]xsh
26.117 -57.7905 mo
459.127 -57.7905 li
459.127 -56.7905 li
26.117 -56.7905 li
cp
458.117 -60.2905 mo
464.117 -57.2905 li
458.117 -54.2905 li
cp
.765011 .551873 0 0 cmyk
f
541.367 -119.781 mo
619.187 -119.781 li
619.187 -158.841 li
541.367 -158.841 li
cp
1 /0 /CSD get_res sepcs
.251 sep
ef
541.367 -119.781 mo
619.187 -119.781 li
619.187 -158.841 li
541.367 -158.841 li
cp
.916228 .750088 .15668 .0255436 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
552.677 -143.07 mo
(o\326o\364o\377o\366o\325o\377p\002o\365)
[8.66754 7.00409 3.13147 6.2771 7.81488 3.13153 8.0105 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
604.757 -143.07 mo
(o\315)sh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
553.097 -126.271 mo
(o\342p\010p\007p\003p\010p\007o\263o\304)
[10.5829 7.66101 4.44556 8.02454 7.70294 4.44556 4.11011 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
497.237 -145.871 mo
(o\326o\324o\337o\326o\302)
[8.66754 8.89124 6.44489 8.66754 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
497.237 -129.07 mo
(o\337o\342o\324o\327)
[6.48679 10.5829 8.8913 0 ]xsh
622.427 -119.781 mo
700.247 -119.781 li
700.247 -158.841 li
622.427 -158.841 li
cp
1 /0 /CSD get_res sepcs
.251 sep
ef
622.427 -119.781 mo
700.247 -119.781 li
700.247 -158.841 li
622.427 -158.841 li
cp
.916228 .750088 .15668 .0255436 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
633.757 -143.07 mo
(o\326o\364o\377o\366o\325o\377p\002o\365)
[8.66754 7.00409 3.13147 6.2771 7.81488 3.13153 8.0105 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
685.837 -143.07 mo
(o\315)sh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
634.177 -126.271 mo
(o\342p\010p\007p\003p\010p\007o\263o\305)
[10.5829 7.66101 4.44556 8.02454 7.70294 4.44556 4.11011 0 ]xsh
700.247 -69.0205 mo
794.747 -69.0205 li
794.747 -108.081 li
700.247 -108.081 li
cp
.322301 .20795 .122408 0 cmyk
ef
700.247 -69.0205 mo
794.747 -69.0205 li
794.747 -108.081 li
700.247 -108.081 li
cp
.916228 .750088 .15668 .0255436 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
730.137 -92.2705 mo
(o\346o\324o\351o\330o\315)
[7.18585 8.8913 8.55573 7.03204 0 ]xsh
%ADOBeginSubsetFont: XQFBYL+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XQFBYL+DengXian-GBK-EUC-H 1 GetGlyphDirectory
28607 <001C60D8A8C9B89100E29774725B9AF77F3AE651C9530684501EEF93F
9A1EE95508D9A5441CEC60FFE9A27C4> |
!
end
end end
%ADOEndSubsetFont
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
713.157 -75.4705 mo
(o\342p\010p\007p\003p\010p\007o\263o\263o\304o\277o\305)
[10.5829 7.66101 4.44556 8.02454 7.70294 4.44556 4.11011 3.88647 7.36737 3.06152 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
497.237 -79.6705 mo
(o\346o\324o\351o\330)
[7.18582 8.89127 8.55579 0 ]xsh
500.897 -57.7905 mo
935.797 -57.7905 li
935.797 -56.7905 li
500.897 -56.7905 li
cp
934.797 -60.2905 mo
940.797 -57.2905 li
934.797 -54.2905 li
cp
.765011 .551873 0 0 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
22.477 14.9495 mo
(o\326o\324o\337o\326o\302)
[8.66753 8.8913 6.44484 8.66753 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
22.477 31.7495 mo
(o\337o\342o\324o\327)
[6.48678 10.5829 8.8913 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
22.477 81.1495 mo
(o\346o\324o\351o\330)
[7.18583 8.8913 8.55575 0 ]xsh
26.117 107.509 mo
459.127 107.509 li
459.127 108.509 li
26.117 108.509 li
cp
458.117 105.009 mo
464.117 108.009 li
458.117 111.009 li
cp
.765011 .551873 0 0 cmyk
f
541.607 48.0995 mo
614.027 48.0995 li
614.027 1.9595 li
541.607 1.9595 li
cp
1 /0 /CSD get_res sepcs
.251 sep
ef
541.607 48.0995 mo
614.027 48.0995 li
614.027 1.9595 li
541.607 1.9595 li
cp
.916228 .750088 .15668 .0255436 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
550.257 21.3095 mo
(o\326o\364o\377o\366o\325o\377p\002o\365)
[8.66754 7.00409 3.13147 6.2771 7.81488 3.13153 8.0105 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
602.357 21.3095 mo
(o\315)sh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
550.617 38.1095 mo
(o\342p\010p\007p\003p\010p\007o\263o\304)
[10.5829 7.66101 4.44556 8.02454 7.70294 4.44556 4.11011 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
495.497 14.9495 mo
(o\326o\324o\337o\326o\302)
[8.66754 8.89127 6.44482 8.66754 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
495.497 31.7495 mo
(o\337o\342o\324o\327)
[6.48679 10.5829 8.8913 0 ]xsh
785.627 52.7195 mo
858.047 52.7195 li
858.047 3.27948 li
785.627 3.27948 li
cp
1 /0 /CSD get_res sepcs
.251 sep
ef
785.627 52.7195 mo
858.047 52.7195 li
858.047 3.27948 li
785.627 3.27948 li
cp
.916228 .750088 .15668 .0255436 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
794.297 24.2895 mo
(o\326o\364o\377o\366o\325o\377p\002o\365)
[8.66754 7.00409 3.13147 6.2771 7.81488 3.13153 8.0105 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
846.377 24.2895 mo
(o\315)sh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
794.657 41.0895 mo
(o\342p\010p\007p\003p\010p\007o\263o\305)
[10.5829 7.66101 4.44556 8.02454 7.70294 4.44556 4.11011 0 ]xsh
858.047 96.8195 mo
940.787 96.8195 li
940.787 51.9395 li
858.047 51.9395 li
cp
.322301 .20795 .122408 0 cmyk
ef
858.047 96.8195 mo
940.787 96.8195 li
940.787 51.9395 li
858.047 51.9395 li
cp
.916228 .750088 .15668 .0255436 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
882.077 62.2695 mo
(o\346o\324o\351o\330o\315)
[7.18585 8.8913 8.55573 7.03204 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
878.057 79.0695 mo
(o\342p\010p\007p\003p\010p\007o\263o\263)
[10.5829 7.66101 4.44556 8.02454 7.70294 4.44556 4.11011 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
890.537 95.8695 mo
(o\304o\277o\305)
[7.36737 3.06152 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
495.497 81.1495 mo
(o\346o\324o\351o\330)
[7.18582 8.89133 8.55569 0 ]xsh
499.157 107.509 mo
935.807 107.509 li
935.807 108.509 li
499.157 108.509 li
cp
934.797 105.009 mo
940.797 108.009 li
934.797 111.009 li
cp
.765011 .551873 0 0 cmyk
f
66.647 48.0995 mo
141.827 48.0995 li
141.827 1.9595 li
66.647 1.9595 li
cp
1 /0 /CSD get_res sepcs
.251 sep
ef
66.647 48.0995 mo
141.827 48.0995 li
141.827 1.9595 li
66.647 1.9595 li
cp
.916228 .750088 .15668 .0255436 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
76.637 21.3095 mo
(o\326o\364o\377o\366o\325o\377p\002o\365)
[8.66753 7.00407 3.13151 6.27706 7.8149 3.13152 8.01051 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
128.717 21.3095 mo
(o\315)sh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
76.997 38.1095 mo
(o\342p\010p\007p\003p\010p\007o\263o\304)
[10.5829 7.66097 4.44554 8.02459 7.70291 4.44554 4.11015 0 ]xsh
141.827 91.7795 mo
210.647 91.7795 li
210.647 52.7195 li
141.827 52.7195 li
cp
.322301 .20795 .122408 0 cmyk
ef
141.827 91.7795 mo
210.647 91.7795 li
210.647 52.7195 li
141.827 52.7195 li
cp
.916228 .750088 .15668 .0255436 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
158.817 68.5495 mo
(o\346o\324o\351o\330o\315)
[7.18582 8.89131 8.55574 7.03203 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
149.037 85.3495 mo
(o\342p\010p\007p\003p\010p\007o\263o\304)
[10.5829 7.66096 4.44554 8.0246 7.70291 4.44554 4.11015 0 ]xsh
320.447 52.7195 mo
395.627 52.7195 li
395.627 2.67947 li
320.447 2.67947 li
cp
1 /0 /CSD get_res sepcs
.251 sep
ef
320.447 52.7195 mo
395.627 52.7195 li
395.627 2.67947 li
320.447 2.67947 li
cp
.916228 .750088 .15668 .0255436 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
330.457 23.9695 mo
(o\326o\364o\377o\366o\325o\377p\002o\365)
[8.66754 7.00406 3.1315 6.27707 7.81491 3.1315 8.01053 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
382.537 23.9695 mo
(o\315)sh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
330.817 40.7695 mo
(o\342p\010p\007p\003p\010p\007o\263o\305)
[10.5829 7.66098 4.44553 8.0246 7.70291 4.44553 4.11017 0 ]xsh
394.007 91.7795 mo
462.887 91.7795 li
462.887 52.7195 li
394.007 52.7195 li
cp
.322301 .20795 .122408 0 cmyk
ef
394.007 91.7795 mo
462.887 91.7795 li
462.887 52.7195 li
394.007 52.7195 li
cp
.916228 .750088 .15668 .0255436 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
411.037 68.5495 mo
(o\346o\324o\351o\330o\315)
[7.18582 8.8913 8.55576 7.03204 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
401.257 85.3495 mo
(o\342p\010p\007p\003p\010p\007o\263o\305)
[10.5829 7.66098 4.44553 8.0246 7.70291 4.44553 4.11017 0 ]xsh
203.747 92.4395 mo
262.667 92.4395 li
262.667 2.6795 li
203.747 2.6795 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
203.747 92.4395 mo
262.667 92.4395 li
262.667 2.6795 li
203.747 2.6795 li
cp
.916228 .750088 .15668 .0255436 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XQFBYL+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XQFBYL+DengXian-GBK-EUC-H 4 GetGlyphDirectory
28635 <001C60D8A8C9B62823789F8A7672D012CAD2DD32D012654209C5EC2F3
24F864BC7BD9473B841A0850D77AD0FBF> |
28668 <001C60D8A8C9B88A65BA9079859C0FCC394F785DDA5330D8BBC923C4A
04A6379E7CCB9> |
28666 <001C60D8A8C9B7FD849A70FBAF5CA9A13C8E26C143A1DF6AC1FE547EA
3C5232E736DB519B3D3AA4EEB5C6BE5BAE3CF35795226E06AD4DC645F74CE709
D6D91E4316CA064CD0C4D0AE7D15A7DAFFFD0C871FB60DBABB3A2AAE10728B75
305448C7B5C7B5F2A56A6D5ABB66520DBD6D65AA03F04B1782EFFFBBC14C56FE
36F36723CB545DCDED9B40F166550D83238B31668EF901F0353888C1B5A6781A
E1D7629C16539B99012D949BB473BAE8FE8799FB00BF6C746B0B7BB5491EAECF
A034F56A464F3951098755CEB00> |
28667 <001C60D8A8C9B795A0BECF06305EE87369211718D3EE2DE866B243806
8E9C3C724D0F5C6BF169F72E1C71967F26B4562105E8A8583BC41A15D900A2B3
FFCE9F31BD4591CB25C31293EBF9381ACF282B598F9431868A2ECD743332A8F6
186BC7793F5EA54E68DE38FBB93> |
!
end
end end
%ADOEndSubsetFont
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
215.357 35.4095 mo
(o\333o\374o\372o\373)
[9.72998 3.13152 8.02458 0 ]xsh
%ADOBeginSubsetFont: XQFBYL+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XQFBYL+DengXian-GBK-EUC-H 1 GetGlyphDirectory
28608 <001C60D8A8C9B7A73DB6A60276D55D01F153B7D96DD64C> |
!
end
end end
%ADOEndSubsetFont
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
243.937 35.4095 mo
(o\300)sh
%ADOBeginSubsetFont: XQFBYL+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XQFBYL+DengXian-GBK-EUC-H 2 GetGlyphDirectory
28677 <001C60D8A8C9B81947031993F366B7797E01770F0CCF402A3810F4860
85B72DA10BE6CC101E91F1F1C8B8F646643C5A8F34CC08EB50A8A38B409FF70F
C08890288922D85661D7A1EFC0CE23BA363CBFF61764B> |
28684 <001C60D8A8C9B747CAEFBC26A39BFF2819386B8EE1586C3CAC86C70F1
BAB44FD74F44D22A5C5DC757A66F0816E2C4932FBAD1CE3F09292C0B35BE69FC
446316A805AFF5DE4C4DCF6EE1023C859A9294B67999444465B2E58797F793D1
FFD7BE16AE4CE582B1E52CCD9D1A67897C4BBAC9E8DF1> |
!
end
end end
%ADOEndSubsetFont
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
211.757 52.2095 mo
(p\003p\005o\374p\002p\005o\374p\007p\014)
[8.0246 4.73927 3.13152 8.01051 4.73927 3.13152 4.44554 0 ]xsh
%ADOBeginSubsetFont: XQFBYL+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XQFBYL+DengXian-GBK-EUC-H 3 GetGlyphDirectory
28647 <001C60D8A8C9B7B5777CD30EEC2706247F18F2EFF0FCD8D1B2AAA4975
E3C181CDDE8> |
28678 <001C60D8A8C9B70582CC565B4883086947A53D700FC22CC37B8FFB6B8
A85AF70378C60D0C6B0C2EF31395945EDFB7DDDE1D0CC898F5B0E9FE9A7A1C3A
4C1BB863EE6725F120C3FDCDE3A35D1AD416BA23B64066650F85DCA6BABE2743
5AEFC317463C12AE039762DAEB1FA885BDDABB217799AFC3B5D24F6EB793F0F5
A070427208AF010078BB18257D47DFD185F390ACEF5FCC7BCA93E3E3197F813A
1D3153232223F7C7C1200BBEA57795F95EDA23BD6ECCB2B42F454E44B3FFBA32
4E2485F90A1F8549AFBDBA375D3F087391D68792DB8B3268EAA6F0D> |
28670 <001C60D8A8C9B745265EC238AF683B8F4A353D25470A8B72A26DB7844
3BE3B1F44B4CA272249F727C6F8216C093BF16FCF6CA661AE> |
!
end
end end
%ADOEndSubsetFont
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
219.857 69.0095 mo
(o\347o\364p\006o\376)
[7.26012 7.02248 5.69437 0 ]xsh
262.967 52.7195 mo
322.307 52.7195 li
322.307 2.67947 li
262.967 2.67947 li
cp
.322301 .20795 .122408 0 cmyk
ef
262.967 52.7195 mo
322.307 52.7195 li
322.307 2.67947 li
262.967 2.67947 li
cp
.916228 .750088 .15668 .0255436 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
274.877 15.5695 mo
(o\337o\342o\324o\327)
[6.48679 10.5829 8.8913 0 ]xsh
%ADOBeginSubsetFont: XQFBYL+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XQFBYL+DengXian-GBK-EUC-H 2 GetGlyphDirectory
28636 <001C60D8A8C9B875744C21AD59FDCBB2749B2268B75FB3> |
28673 <001C60D8A8C9B795A0BECF06305EE87369211718D3EE2DE866B243806
8E9C56279E98DF67709852BED129643D4AB00494058DE56C3A2F59EF8337CDEA
A886E2F10A16806F6D040F0BA7348192390D4410BDA51BF850E2AE66992849BB
353A6DA88D5EB6C10AE42038B49> |
!
end
end end
%ADOEndSubsetFont
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
274.337 32.3695 mo
(o\334p\001p\003p\010p\007o\302)
[3.45297 7.68906 8.02457 7.70291 4.44556 0 ]xsh
%ADOBeginSubsetFont: XQFBYL+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XQFBYL+DengXian-GBK-EUC-H 2 GetGlyphDirectory
28650 <001C60D8A8C9B5B548D2EFD0A9ED56EAF070A7FF069B060919C1C0A4E
72F395D9C48BAA98435BFFCA96D4A3ADC67E9E8FAAE63166AEA6A9D49D0911B9
EC81397D5DC0F1EBF7BE8A29E8F53DB1850EC067158195238B828892A6190573
0B4752BA46F53BFA297956E26> |
28664 <001C60D8A8C9B7B9B9DE64C375A9DBACE95282B2312E3D85E750527CC
1CB7ECCD03A956DF6AAF4A7168B7148981EC76A8077847319739BD7AFC9C273C
D7ABB104CCAF232DF037808051A4E0AEF540B0A7B3AF3F3A775F4BE57DC95A2B
88BC481E3C3C5CD29A90412FD55B68E26377057408C4E5640926FF2E1A05E5CA
C44778E8205CC9A62299713EA1CA0206B13> |
!
end
end end
%ADOEndSubsetFont
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
270.977 49.1695 mo
(o\352o\370o\374o\372o\373p\007)
[12.7916 7.18582 3.13153 8.02457 7.68906 0 ]xsh
614.447 93.7595 mo
669.107 93.7595 li
669.107 45.2195 li
614.447 45.2195 li
cp
.322301 .20795 .122408 0 cmyk
ef
614.447 93.7595 mo
669.107 93.7595 li
669.107 45.2195 li
614.447 45.2195 li
cp
.916228 .750088 .15668 .0255436 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
625.897 57.3495 mo
(o\346o\324o\351o\330)
[7.18585 8.8913 8.55573 0 ]xsh
%ADOBeginSubsetFont: XQFBYL+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XQFBYL+DengXian-GBK-EUC-H 1 GetGlyphDirectory
28633 <001C60D8A8C9B75E5E15AFD6A09866F0491F1027106958A942351926A
12C16CC8CE102375270AADD> |
!
end
end end
%ADOEndSubsetFont
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
632.017 74.1695 mo
(o\331p\002p\005)
[6.66852 8.0105 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
627.997 90.9695 mo
(o\334p\001p\007o\370p\005)
[3.453 7.68903 4.44556 7.18579 0 ]xsh
666.407 93.6995 mo
726.467 93.6995 li
726.467 3.93948 li
666.407 3.93948 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
666.407 93.6995 mo
726.467 93.6995 li
726.467 3.93948 li
666.407 3.93948 li
cp
.916228 .750088 .15668 .0255436 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
678.637 36.6895 mo
(o\333o\374o\372o\373)
[9.68805 3.13153 8.02454 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
707.197 36.6895 mo
(o\300)sh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
675.037 53.4895 mo
(p\003p\005o\374p\002p\005o\374p\007p\014)
[8.0246 4.73926 3.13153 8.0105 4.73932 3.13147 4.44556 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
683.137 70.2895 mo
(o\347o\364p\006o\376)
[7.26013 7.02246 5.69434 0 ]xsh
725.567 52.7195 mo
785.687 52.7195 li
785.687 3.93948 li
725.567 3.93948 li
cp
.322301 .20795 .122408 0 cmyk
ef
725.567 52.7195 mo
785.687 52.7195 li
785.687 3.93948 li
725.567 3.93948 li
cp
.916228 .750088 .15668 .0255436 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
737.877 16.2095 mo
(o\337o\342o\324o\327)
[6.48676 10.5829 8.8913 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
737.337 33.0095 mo
(o\334p\001p\003p\010p\007o\302)
[3.453 7.68903 8.0246 7.70288 4.44556 0 ]xsh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [13.98 0 0 -13.98 0 0 ]msf
733.977 49.8095 mo
(o\352o\370o\374o\372o\373p\007)
[12.7916 7.18579 3.13153 8.0246 7.68903 0 ]xsh
%ADOBeginSubsetFont: XQFBYM+DengXian-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (XQFBYM+DengXian-GBK-EUC-H)
%%Title: (XQFBYM+DengXian-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /XQFBYM+DengXian-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-141 -253 1151 954} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 29235 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 35 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
12806 <001C60D8A8C9B5EE31009EBDF88840ECC2400DFF258F537A4D6930540
1AB0273F2B1126B6C3A50001B8BA96B4027E7A8FE9E9C8E1F6BDA5C4C3B6D7A7
02A8AB6EBE2161BEA517409D8180074C57A1C35A0BE9B2E0BD7BA74E0731E7F8
0BEC6FF5750BE9FA0B633D7C241698ABACC93F9DC09BA6D01189148C335A2F45
2ABADD32311D6C4F222815088F90AAF9F4EB797B4D1B72C2F93D99E2392E10E6
E101ABFBC062D40CCFA4A07962C04F02208043E60261C6FAD9ACC9D58BAEA715
6CF0D0C257DFDD9955B552728D58243C6A043822F0D594C57C9262FBAAF07903
47C336DAC258532CBCA2B0B386C0BC03D9B26A11D8A237FD071C2288BFD37C95
1AFC09537973FD483DDC4D8B4750A6D72A28DDFCEDA6C79CAFE49867846CC958
68686776263E86EE8B510298F9D4770BC3357073328E2062A7DFFC52E34EED54
1EBF8515C31168E5C9517EA9962B1F5EB27303C462BE3DADCDD77C3F5976AC49
F36F5ABCD29E030971B487AA5C16E70FC7D03525DFD76B613CD59A805B920709
A0732574BE85070D376D0B88D747EC05335398B4D97E0B10051AB7CC667BDF04
E6F5FB6ABA00AE1D82F7E3F993C86157FB348075D6CC17D335CF1F148EAEA778
5DDFD545BED2D18311B27FE> |
7651 <001C60D8A8C9B5EE3165FD03260EE922EDFD5C666BD569D4781EDA9AB6
DCACFF97E636932D1DBECE6D3E0E22CA9ED999B56F30602C757136BE30F0BCD6
F0F8B66E2E0E2C59FD816B2B0F832F233BC96FE1A5E078DD5D029BD2EFA82A1F
AB27155EABD88B6F6A599F152A6EE60D80CE51E8EDE0E20E5503813C596A3122
76BECDF48BC1F0AEFB12CF11F756526F133E62B5C648052B504EC589ABF59981
85A4E3A2C6BE8F6A125AA2C310868A46A68F73972DA8AEAF9269C82989D17DFA
8337CCA242DECA9DD108DB19D46398> |
26992 <001C60D8A8C9B5EE31186F36C5168A93206A6C58DD20F55E946BDBC93
EAE4160FD724CFEE9740229A24E0AC0F6DA0AF25C63CEBE6846D3486751AF89F
03648D706717F14EDA2FBFAB2B87D7A6C030E0E157F544D32C2A98DB465C5233
D7BDFE677C515C17B297E5848572255667150359CB898D60239984E37F8F6089
193C4099F90B5799E3BE27D3418F7CEA3FFEFDBEFABC08AB1277F50359157BB8
5B5D4FA417C180701F223D72368B5E099EC0F0E41D3E81464C1611DFE562EAD6
63C15D2BCA2C812BCC373081B4C89E4DAE8AC028FB431A09C2D66E622FE832D7
1EDA103CD3BACF5196B9180F43915981684260E33CEF725DD21BB955748CDEC3
8CE227EE6A35A77FB005CA9996608E5F94965E77FECF814F30ABC2439155F071
1F78F2451A9F7B4492A52CA21036CD8EFEC3A76E0904BD037007785F79F1E2B3
E3D2FD5D10D5A3F45E59E75C3B27D88BEABF57DE7631D1546FAE73F64F18874C
565E689DE4E451CA61F9AC1A41D9CC2CC05F2EF7A94F9A0E2EC75C3AE6939905
87B76CA8A34FF9B730ECF7884B70075A1EE766720> |
8615 <001C60D8A8C9B5EE3102B2126A82D8A248D1BFD01A9109712D0157ED71
62CA28ECA8777D059F98C1836FB623F03FAB3CE4C8897D6BF0D74775EE515D72
E5AD327247D2F7EE93A91FA61AF7C6C857F31687AEE60429F9F0CCF20D71BD33
1BD2135A0F65FFE1FDC13572AE6E3CD6C3F52B37A2E0866EC41BF36D918D9AE4
6AB9BFA23926E71949378B9EE632DD69E239376E55F6410DCDAFED651718C0CD
1E045E14E7ACEFB682EA626F42A6E64C648D7379D1899C616120807893BCD974
2B7B767685327368F3580535553BDA5DCFDE079A7897F2FC6F29D643DCA0DC0E
AC52C6B8A688D6EBB32FDF3516D19CE5CD1D885BC7CE0F2E6C8307AC9E0D053A
22A09D3598D159219F512C62CAEDF23C63F6BCF34112B59D26289C27AC4A9360
55E65249CCAD137D2864D5C42F8286148DF2F8EB4D300DAEA03F744D56E4B58C
529D57E7FF828B119992A6783AAC9B61C5B96708FBF1C474B8E0F47A8BD3FF0F
F42FB775132A2C2A4325A4B44EC92BEBCE7BF19AB630942EBAC36F959CC3> |
17795 <001C60D8A8C9B5EE3102ACF6DA1574FF7DE927B8CBF37F5241CBE4591
10F5CEF92306AAF001C4E4C848D0FBCF1E97CF09D79B33182400D635FAF37844
7D75DB108A532C80D850D8D913F46D44F97EB2057FEE27BF74578F95877B9FAF
F6E357CBF18945F0C950567ECC42FDA83DB4E123D642E32FBA57B1471DCA7AB9
73BB27BED96B73F0B0A12EEB2737C7F657D0708B540CA09A238F21B11FDA3631
F5ADAD8450CEBF0F4E2E9FDEAAE7C0A8F86206F3AE422817B30431A83BCA74C6
8A20EBAD75F6902EEF457A04931416F88DA72C4C88AF8A3FFB3CFECBA7AE062C
03AE0CA580490699F24141DFB736E2D44F6EAFF71E151BE631069E7F8D2E90A2
199071532F49C7F8E6801EB3082C8C7AC4B39AE00A849B599A39A81A4B5E3C69
167BCE7EE65B69AA3D413A5BF63C408731250F92E7BCE1F000C5C77> |
8607 <001C60D8A8C9B5EE3102C4917493271F4F301812AF67E3FAF25E8B34D2
492D4512A6FC95C8AEE21BF78EE13BE4DDB20CE0F80ED87274C7DDB4A90B3EED
C1FC133B7FF99FC54037778DE42843D3316243CAF3EECF79E159AAA9CBA9F7B4
A1509E4C0ED793FCAC0C96B3263E8C56A65E4CFD299F20215026E3859CAFA379
31C58CA50CC17487DD2F16E65BC0078FADC6E992F728F7CAF636FD0DCEB69B5F
5415731CF23C51F91987837656E5B2B1C19E1FC7E792DA801388B8C9973BD6E5
9E612393B78500C3EA9E2B4CCF24AA378EEE1D7DB99326031E01EF14488292AC
1DDEB41D7BA059EB1098506C4F1CE3D9522161C2973B37853C8EB5EE7AE58C5B
3CD9995EC4A0FE217F3399A9B75F8F31620249440783F0ED51908B> |
24350 <001C60D8A8C9B5EE310D6CEEFB044F713790F417BEA058EE808332AC3
68FB286AA4CEE19520E02948CD1745FDB0A95BEF3514EF285893A86A2F1BBF7C
C3A82044775A8E8357B5FA9C91AD6331EC3A627095CAC3AE03E1B23B1667187F
2C204D9E54C3439D0C0674860E16CCDE6A6450CE6EC5C9FEA98659BADFC5D277
AA7CE4745E5D4E07A4CA75F404D3C7BDAC4E12EC078C8D55C3C778D7F82E64A6
13B23D613B6BF6D10CB87284C1879CA00FB2FEAF1D0B447DAB54E0915B180DAB
1A22B741708091FF336A4C347B927E9E66B73C35A1ACB703E0E998D805C178F3
FEDB478C6ABE1732F17F62AB897AD8F7EB61238E332D6032FDBE6AE108F1E81E
BEA281B158AC4792A3DA1B47F707E55A013F69DECE567C79661FB329CCF9EE67
E227887291B1AFA79E8D04403F3D627F5F2E984659ABC0AB9606AD8C79897AE6
D5D3C374617D8090FABEA0E90FC57CC72099B4572D5B6616E9AC4DB74EAAA32F
D7FA74CD895718411275A9F0CDF233847826928D4A10F4FF7B4FF0E9982D8B8D
E8A0E656AEB0A46A94D07B81155E7A32811AE5E9702D70455B3EC3B50A8C8035
EF198D10C7115E089C8C6814743DBD9AE8496B65FC31FC584> |
9575 <001C60D8A8C9B5EE31371A078C09E5B91DE093C44BAC15F87531AB5DDE
3B0C7EF36D8C45DE136D8391AA19AD20637FDBC4F408C3D506A3C3CF555BF732
4C362801282870005096D56814DCBB648722A1AC08D1149C79688D2B64BC5FF3
23FDA8E64F87178019A098D4CFB2E23F491611CAC4B894F7543085AFEAAE92EB
B168B14C65344392602A66DF258DF3A6A7A4115A725CE54C0BD00B9A9941BA61
9E35DEFF2E025F40E2AA28AF71A2D5154FB8AADF19CB77B1074DED211261EA53
F49D941B70E4D5F461A6D5AF767526DBCD8E9752B6A821DD16C99604FDD4DFBF
8C70C76B2DE97BED33748F6E18C7849DA664281B08C3C143282336E070E47391
62629F7AD47A445AC15EA7BD20A5B85B67E8633B642D8A9BCE19481870358D47
E4DA9A6E33F1EE5EE2DC86BC71CD8873C7DEFBFCE3FC69070B394454E67AD21D
1C24E2B5EDAA96CB14C9B4A8E4EA9486F6B4463CAAE6B250EEF28FFFE7FBF42E
9F67E6DF5D7CABD4D04B69A6578DCE4B3E4AEDBA6CE287B433DF974DE8C6FFBC
B243CEC3EEA8C333F4D1F4C46AF5685A5527FF05EFD56617063FC60446EF1363
A6BFC71FAD3A3C99CD2F49E4FFD982CAC9864A837BF673D3F8F3A21B30752A9D
850BC504A0B5EFBFD747EDA519A0DBC0B197CF05615C632CB76AC95E8A366A9A
1F6850E241B57DF31EA197629D65280998A44CDC78E0395B2C3448BB21366E71
2CDC9AAC2417> |
7423 <001C60D8A8C9B5EE310D3B64359BC7E1A5470EF735B03284A9677B1D95
D677743FBECB52A9685CDF2D55B1F8108D703E5F6BBA5B2164> |
20779 <001C60D8A8C9B5EE310D72148E0927508C046A27AC38A3EB4A5BF8C02
4A3D563F293C61057322CD24F8AC7DAA93AE4D2165F11A5A63D76B7C2796E16A
55B62C26CA1E6A6699CCE553C555645BDCCF8BF36D6CCB27C2D5A8C634143BE5
838F4A7CBF0B20EECEDC11FB4BB038F5C6B9DBCC73606569502C4FD11067CBB0
0960BB5918E979C94E681EEE158182A0D5A46A04DCAACB7636DD332F7A575E32
95F4FEFA30E9F0BB90830F8EF9FFE4220A3EEB98FDCBADD9C206DF2D01827230
F6C93284D487A9C7FDB0217D778999C32845E0AEB270BFCF34D9515C72C9380F
5EDEA4D442508FE1662152386D5DE036AB7612D33BB629B0361F8AE0E520DCD5
9225F7A8E01357E7DBB2CACA4B0A072BD14208E420C8F7D641BB4E24E7FC53B0
A3B897A8659910A8C8306BF0C1751A6F4D03910DB045415F39B41FB66A949A58
4EA6BB7F68C96144BB72C1B9CEBCA1BD69533B9926265C160279018097D9E114
6E5242D846781D58E8E7BA79A5567402F95A25A67A1BF0CF01CA1EFD98A554F4
03EB1E21F02E9F235DB5449F2639BB509B0CACBEE416D8D4D32058B7C1984F09
3E08B4489DF325BA36CB05C8A074223FFDFDFE021D50AFACF9FF5C4166FE2D64
DDDC61CE352DD531AD46668A8698E4B1BDC04A709F53DF2643095485DEAA37FE
732A2696A1DD8EEC6AEC61DF044042AD8B755129A4816EF> |
8453 <001C60D8A8C9B5EE3112EF14D2E788042E896728BB40860E801E060687
8C9F7D71CC4E7C1B1684B7C605B0E6CA19E97C33F0843FE5EB512471FF60E45A
82C34FC1FE67939480115D4276A01191CAD8CD9B00D7039FF73F98DADFE490A9
646420CCCD1CD23A271982C6B461842DC18FF87878E52462052BC65ABA7D8005
106DBE71F3E19EA369F6927909078CF76E524846CD811E9E73981D654CA4EA91
E5A50E29B31DB1F5C6D14D58BC51749D7ED78F3F259E491F41F3514E2001CCAD
98373FEF15EA6D7848CDA87BAFAF750EFA6696701EE314ABBAE70A99C7981B3F
40> |
7481 <001C60D8A8C9B5EE310D3F3780C3FB133F302AF9662CFC0273780801BB
04A9CE2CCB6BF39482B09C53E470488C282EF3998B3583D7BE5A45FF3DCD9358
EA1FD30A37DE4237E578A6D9EFB7853461318F1B6827BDFF1605A79637D95DFE
169DBCB5C4C6372AD7C4C0B0E4AB2534420A9EA9EDD0037D0F5A587D0428E83F
A5DFE3722641AD2D74D37BEEB49D617E9DD30261BF846BA4C1802B288EA36252
0D2B1DE157C96FB60B398F0DA48EA13572F5F356645D9EE9579307D7D432F9BA
4E29751135B238706294E282587E38AE9B7AB54C2C52E1F33CB27E29FA955CE2
E6EACA1116D7A0626C43FA9CAF179660567D359AE8CA> |
7432 <001C60D8A8C9B5EE31031EB1D734BEFDA662AA6FE0DAE286D99A903CA8
83A74ED3A975CBE65B3DC60EBDEF39E2B74DF06FE880FF87A6CD85AB7270DF8A
D8E54791BE0B0A4CE4F03B994F99F117303282C36C864C398CA072E0713ADD9A
96D8505DEF7ED4BE9917B83E2284151A0CCDDE158F1BDBA421DE2D6A69131B4C
824EE25C0A689E7902E7E1E633ED84> |
10278 <001C60D8A8C9B5EE310D1D990B9F277D493A512B188047C49C8C4081F
9ABC7E94A5CB0DD5400AD26ABFDF227E48141D0BF2904391C6E4B4744892212D
A2AFCDD37F2474B9F8BB3C39AC1F10C1C94D41220219E6A0A4BD3DCB8C387BB3
D839457382E22F185BB84DCC46F959F74C68C8CAA53581BCC0F036F6021B259F
88254CA42E866D3CA4A81B8444A3A403B7991A39498A7FEEDCAFEA2AFD575EEE
904> |
19322 <001C60D8A8C9B5EE31144FDB23FFD943605C2F480799DB590F7ED9654
B85F545DB7B533C3AC7ADF27DB0B8C3E3D7C9DA8B06FA7B6E96C739A478E2E12
9281DC432A613F919FBB38AFED91ADC8F67AEF20E59A2B7C4F0E79E7F2E9ED23
1513C0648C253455667D2EB3F8527D085FA683476B0917CBF95B93039ECAB2EC
63C27C99C9BB04797DC8B6C12FACEBDF2D1C6CC9E8E82B699971FBBA6311411D
6B2331BB110C1A930DDE3D9E59CBBC98FFC71D43EB614BDFF1BCFDF6210FE034
78D832350D97BD51C4C7A82F22A8E9DDE7DC6C8836AF8905D66AC803E31ED54E
6DAD8BF7A98CF7EDC834BB89D9F2B596D2B9FADA2A04C9E63F70C836D29AAEB4
91A5DE6B53B25674B0677BB3C0BE91452BC3A3036D91D7BFC8D7C071A9856D59
43D96B8E58DE6EBEF18232ABB64B09F345105A09BEC869BA1D7D908F865A1970
AF6197C44FB54ADD5473BE139D099FF16A7ED26AC729C0370FA4AFC663692F57
9EC4BAB5201D171F9585A499E9E0978858811CC29A6E96483BDB8134BFF79763
0E2> |
28435 <001C60D8A8C9B5EE310D6CAED735954C41DCCC8F64B7D7EDA32CF5A59
FCABE1CF904498FBB8AF3ADBDEC0082> |
23290 <001C60D8A8C9B5EE310D4063F4339A8DA67842425358C63AFA65C1D11
4E1EF38D145C9E4E4C851FC3525D48558AD1EC098D48D6A65D4C83AB28DE2267
0E2CCC7C4739CE175D2BD631C3A22626F0F037925D4B0E2E7898F583377C1C74
1A715BDE2227AAFEAB21A7E45E89E0AC4637A9076C82B52140B0E8DFC0A40C6C
F1A10EAE72571EC45490172D5B2E2F447D861F2DA07E58F88D705444A00FC4B9
91CF207B115F9A7A696C74F5DFD753EB0D6259FACFE8DFA64425CCE31946E365
79F263A7A3DE5E4A43A2B9243D545C2422F0B55A7D14A30EAC3B7AFDA62DEB80
5A549973479B9C53F39FA3410AED1E25A744EEAB1C79F515F8C57C557FEF9BC0
B02B61DE078FC5E3A728DCF92D49C9B92D77C8367599E1E0F0D748277DD70E56
6CB9943181041E05DF6AD0CC1B7D525CEE07A250F515ACD834F5BDA15E261AD4
92978C362EC25DB4B9C586522C4C5576318CC87DB545019E176173BBC2FFCB74
41929676B7ACA0FE62BE8F1B88F662DFD90D1997EE0AFA503EB2F2BB30598BB0
87FE03882D1CA5A3B130EAD47C8CABFE3AB8A39E342EB40D2C4B3E8D5EAF1F1A
EC22B16B4562F900E5CCD964FE830CD65D9EF07D3639233330EE4F68D35D5E49
9678F77D6B5F3E14B89166E41168C0B> |
8917 <001C60D8A8C9B5EE310229BEB6DA829A6ABD7D4C500F895B740F232EA2
6490AA58AF1FD88AFB10E900ABB9ABA3891F151790BE6B7539976380D6ED826C
EEFB6D25D9D21015DE69D41FA3782C13DAEB135D9116B9A4F8BF8270CCB5D89A
6155AE2D4126264AD1565C098D935D1AC8027C3AF4D52E54DEFAC8F4E74D2745
B638A24511436E59F1065094C78B9184CC7301CCB0589E3AD022FAE922BC542A
D3092A1725D5E55E4E4F5A4CE63882A7D049FE2682F16A4900B754A24E0FA977
AF9084D60B8A7443D741B970645270A43346D6D178497811391BE494C9D753D9
61B7774E81AC2D6106EC40BA88723811FFF0DD32016179201515B154A81F3870
0EFA2B220DFC84B0BFFDAD022704B64A9E76046D739117BF143F223EC38F5BC2
80AC0960100EF3> |
13423 <001C60D8A8C9B5EE310D088434E191882D53FC947B32A3356BD76B41B
37E293AD803C66B38271B21B7C5CE1F8F475EF715C1E06944EEA61A02B21D63B
9A2B81E7DD1B94F71AAA2FB2121D65B879E119028051E346AF2AFF565615F2AD
E16D08ED80E7CA616B633E7C7CBF706232D6A2D0589086E98872CD368960EE08
581556C373047443768A59963313F920095AE635A64A65DC7F7F810BCCD6CAC9
28000B30ED543CB4B17D46BA22C877AEC831E7319E7944345CB68A28E9D3ED3E
8D132F35869E07E393AE604D3C9E9EB28EDABC679613B07C0FB49EC16282A7C7
9BD6D61B3C7B14D1BC37267DA6895EEA1232B4EE14FB8960A9781E4462123E6E
8D98D19DAD66FB0D11857C6C435A37827AB1150223F01C0BFFDFDC7638791A66
EF7D9A82AD0D1D68CB27DA2D6345673837E9FF27EDDCFB8B0FE61BF7CCA69314
684CD7626459258BA0DD83062944C581930AF99854761BA47EAF0BBCF2B1F636
A46281544AEDAAF3D03659F8A9B5FA4C4939D678C52AE9919EB997B005AE05BA
2D18ABDAF9450D11095B60D4ED02EFD96E7D8B7EF0C1076AA767B1E7AA5B1383
5E59B9606DB54DEE076DA73EA22F8ABBDD2470B51CBD3EF8A93632DC9F616044
5872B540B685A2F533225AF9CD242F7AC79C725B66867CBB135EBD1AEF3C7CD1
E6583B22B507153F21A6DFD443ABC1D2367E43076E357E3A32D7C06424444572
38A346AAC5D8105DD0A2729311A3BA78C9F554647C78ED69974B23CA049BF320
7E9B838C4AE521CDCF6841D14265FCEDDA017CD2768A6AE607DDDDEFD0BE480> |
12909 <001C60D8A8C9B5EE31027E0F87C0852FB20BAB4D56A779125033838E8
9F0F9EDB9D544F349FB123AD6B0DF6A49DBAC75CF086B844F788BEEBB65D6266
9AB2F64212BB46E9A321DAE5CB900500A7F32030E05DB4F950AF41A98E02BBF0
58D660570342E833DB967B2DB450B44AB343B5CDEDFC59DFEF1CA2B18F95F84C
2D31DE438E993943993E428FF20760900E802478D234C6B6B25792FCCBE98B9F
19CE29143BFCB9264AE7EAE715B756F8C83E83AC6A39599409BD0ECE0A271705
2CC93988D6B15A313DE40A575DACE8ADC92ED3E8814DEF5944C3B4B5BA4A468D
7C0AA04594CA51F4B957A02C449043C631239521C510B87CA82EB9204077C86B
36D6CFDCC7F710C2947258A4AC918E70A027180EE79B98CBE0CD1FDD91D45658
479C8F821F00D9313263E1EF2ACC7F6433B0D99F43EA0AFA88D594F555BCC0E8
ECEC4A11F03FE12C59C9E3BE241A77DDE2B892FDB2322C170822EEAF4A3A39E1
DE69E5BE9C3E8E94220EA8CE320CD5BFC5DFE4882F270B22F484A8DBA3A188E9
600ED27ABFBD50EB74D2461377108AF599B2E9D9864315A08FB15E36E69432CA
5A15D888A2FA73B01DF839F2CAEDD4EC13FAC45FB91DA29AF28A7B7274F9FBA7
790051A7A11DEBAEC094548819B7C8336438E463A1355CD35428D718134D621> |
23200 <001C60D8A8C9B5EE310D4CB0561C61DE4BC95F49B2EE503A84C029335
1911BCE0CB089ABC7A996C18FCBD526BC49826D259693B889D0BA0C1901FA548
7CAE9D83B5D292F588B809A41B6E7898894EA2F799AA85E627E7F9F57EF1FBE5
907B3FB2BF8350A008E04805A7583E2E7C29A3BE8BA884E805CC746A63C2FAAB
57263824B47A17A7FD789D8976E5FF4AF13137651F673131703A34EAB7C81313
37DB5336B9C42248FCA5ABC33828A783467F40DE3D9D03AB9EC8C683D89A8B62
0CD867A5EECD420083F94D79A0E77E2560E3A6D4898272BD7CCAFCDD8C56BA7> |
19094 <001C60D8A8C9B5EE310DB5049D64D561C14831E6242E5CBD53B158BEA
79884104F42065EB6C64DF335B01EC893A8131BA1BAB2901D805F4395AFE55AD
843B59D10D3213F11601633412EC1D4BF84FE17064ABEC635683802DB2E4A669
5E5F974F2A1C8E79CDB58F11E2DBA0F12913A0DE3B2F9F2221131CFCDFADE4A4
94AA416965443FD86445E8198CA6B5A6B3027457F16FD2E4D481792E5D2F2858
3148F3CF7049882C3C7D173830EE11933FB61095ED0ADA8AA6D4943A8C19F743
0183CCF706609220251DC84EDF7830A4D067E9842C74198FE6647B13DDF85B06
E447C0C43E51C09A16A31D31A44408001AC557245A769B4169F2C1AC3EA0B67B
41314893F79C647408EF68B71CEA162CB3672E072A22965F0A7107F53D6B2973
B22EE5101969E0C07DE5F171E3CF0A439735CBFB3697E1B36D15841B59009329
8E858AC4D1443E838FBB1BF695A5BCB1F0603A8E3C5A40B6C9FCF34A2E0C7465
B3E4B9DB6FF0DFB183E0A8974BF93B7E270119C76B6CC04B85AF5476784F051D
F59BB78A830BED30C414A9DEAB178BDA02805DE8A465CBC1DEED449BD8D0BC32
782D5A86E494CA2AF664FD97DC3> |
28431 <001C60D8A8C9B5EE310380D9ABB94CAD62297C57B5CF61F2A9BA0A7AA
5A4170FCFDD72E6C66468390F4E474F4C08B4163820F1C4D9635F1F3AFFD9A6F
F964218> |
7468 <001C60D8A8C9B5EE31028434C4D6C30C64DF1C96B7E46404E90C2FA9E3
8488C286DD13DCCADC3A0AC855704BE521DFFEEF8C2FCC7041C780932D31D84C
64663717C7BDC9EC5CDE9EE4785DC1293B522116561533EAA4CF35E326ED302E
FB1E78D291DCB210CFB838D87A23CF01ECE388435919AD440336B2190CFF0AAC
9CCF40DFDA7BA855F0025635224377A8E04BD4F921C208D72A51CA69C5A20B6D
1714F71EF327303F4E298F819B27A7302BF7551867> |
25843 <001C60D8A8C9B5EE310DB639EFD16D65252454DF5ACF6125A4290A2CE
AA90468220F348764C0FF7F85BBBEECC08D11B9FBFE6471426E5E835C576648A
B127975295B4CDFD2ACF3103A993A4058DB3184CB6BB37F30D39BB5A72EA5A07
CC9576585F711815C2BB6324286D18837BC5C070E713BB5814A4168B5D3B301B
F3D72B98A705535738013E2D2E96A448F3D677B9A89FBAE65F88C2749F533E4A
FF477C73DF373D8C5AFD1EA4122A5563A077CD8CDC45606480B65846AD172CE2
99A4AEF88939D7E5413A1EF130BB171E12BEF27B7BD78928A974B97C36E8A02C
5651C278479691EAE6BC9EAAC54DACCA76D189B94EC4499789D5D74912654F6E
D27759F4A7D154E397C0D8104C4BF9F1EC0419FE7294D0DE50FD07DCC67A16B0
01C> |
19922 <001C60D8A8C9B5EE3145471278B072BADEFEAA4336C61FD208E46387D
252DE0B66A3F173FB3C7644F1C2964578911C26FC3880D3DB1CE8FCBE0AD6E59
4B533F851CB3E559B573CD1ABE662F74BA279A40E7F131EC710C4D93A989889C
0D7F8BE2900BB95D17195172F6C4CCEFBF6D035DCF6BCC0569286D2CEE4274EB
70AC4A83C2723FF00FE52FB9B2318DCAD634627B9D41245ADB10F4F6BCBA3C63
E9D56952B2E2022FF1DC22326535225352A96A63FE501BAFC1119CCA64812B89
2770DFF62F16500E22E89CE1D11BF7A5774BB859BBDC9595E8D7F30ED6D06BD7
E6FD3FABFD2525E0170ED8429EA72B2A05D7258F91A2C3735E4395BA9F30D700
4363E6D117A4BFBE2D7FAA5F150BDB51291E647B71C3F14F2D3FA8FA4CC68288
AF2B7ACD36BE24115736120A94FFC9AE6405D9339DCAEB9A4B9063DA94C43963
039CE2EDC3601B964F08E8ED97B2D78E0F422F796FCA0727174E6145CEE5B63D
518C468748BBCC304936F6D57B3ADC7838F16AC0C539FF0662CB1328EB88094A
E674B078C4E9AFC5C0E7C1C7AFC3B0DCBE83F40D7BF7B3420BF3346124285901
BB24613A70903B29B287F> |
13979 <001C60D8A8C9B5EE310D4062F8D0613BC2C9743EB9984C54505F1621C
32B2EE203D5D44FDDB59B9751CC35C6A387090AE274BF2C852EADCE1CBA8456C
D29EFE0F0CEF468A6F0812A3B52B679F3A4313ABDD2E256FD6CF8DFFC743CF0F
92C2084D29F4AD6CDBFBC829270BB4A44FF0986E0E69DE8D9C6161B6E971F396
D9D295194789A91E97A3B9EC8244DDE5208235B3B2BF4C5CFA0C7BCE2E366933
DC185C3EDD6EFE7F0710992F935CC3C50DD9D7187C6992369401AFCDEC712AC1
8E6E240CAA4D7EE0668207A7869AD3ACC72C7AC63D3F0CBEA048D3AAEAC7B7EE
F1D29C741308E15645538306999E0304CA0A8C7083D4B860DF476CD28102F87D
0FD707382726D1ED94303B01B6A9E59846DC6> |
571 <001C60D8A8C9B5EE310DD90104D916E7F1D13757F9B69A8EC0EA758D302
8CD2AF60DC3F7> |
13823 <001C60D8A8C9B5EE3100D3B4AB99C897B31AB7C722B3D7FD42B793F5E
1672B1DCBC95C15BACE12FDDA0EAD2041DB3571FDBC31BE73E92C4DC3AD318A6
63DC22D7E957AC201CD55603AE26C29BEC7BB9FE8AB64C83B51E9CD756660FAA
646AF621A1A6523456A4A3F0EFFB7DD3389BF0E6952C44A96EE17487D958CB64
9D22C63A4477F460DDA48B1F3F42960FDF43D1E0D6400D77BA06297E565FDE26
D1CE10A71EB48A23B332D9B2F6D49A1ACBACD1432FFDDC7741CAB3045EE12A9A
8A40A49B65EA84233437B83AB3D1FA9AD554A07B6B0D30906A6DC4C8C24BB0E9
E376CF371AF8699D1B742B4ED0A6AE4BA3E8065AA44D1439D869C6C558C3480D
FA7241262D5CDA5C238EC61471AAD5D86C840DAB823FB701DE146AB923427B74
9AA329E3943D07C8E92E274A9DBBAE8BAAB8F89C2E883D4524FD6092F1BE5187
6CF1EACA2F23BF82D7171B03FC19EA099645552A8379344CA8FD943979D64EED
547B15D016456B49BB50AAE6D342E6A1D231E7F7522794614A75D8F726F08189
0501F9A906AC749701213D5CF301D0FF99B739C6C1CF618D178E0FC0FDBC0F7D
8E1> |
19911 <001C60D8A8C9B5EE310D8D4BC1DAD7300A586DA044A43F391ED56A951
EBAEBA76BE1FDC1F5FCAD70F52DF2FE3151F0FA70CF6B1B00FB14E92AEF1BCC7
928877B88B98A7E4588063BC60EC716568E79096DACAB992A60C01E1265FAA7D
3B43FAC762E55B72D49E9B6574AEE762ECBA1FC5804AE3F8A1C6BC1D436ECD4F
D1DF00032EB76EE36967C6E07D2099D4D25EE146970E4A3D46AF58CB41E45965
6EFE1B8A7234FB86D031542519E847F2BF7D6E0ACB866F37E088476AC23AD11B
C4A211D4B5AB5C950DFD79461BF66D433E35B247BF52B5BEE653E68DF282FFA6
2B4CDB1F94F82127FD2F208E4B7C6AADED03D4AC08477FAA00A51716168C30C6
9E5427789F202B50944E97875FF8751784ABBB94445D6713B16D1BD49104E05E
1E77BD3874B3DCBD543986BB424DBF7F88EA3038396A6C1B2CF120166CAABE4E
18E4E4D26B0BF766551CF94620EBA4F8D6449D7A71AD2923B8650EABD63ECA5F
5028DD6175784A342A94A951455C31408EB4C10CB92605CE051B919B77F> |
28432 <001C60D8A8C9B5EE310DC9E4D654640DA8ED2075703F3C644BF0856C7
9C670D56F4EB70C413F2BECCD0BAA7B6F1C6EC50FCD5BA902D832929A97DD960
CB581> |
8344 <001C60D8A8C9B5EE310D4A799606404136EFE5A1EA7E5FBDF7B79F5C57
BBDF57D4587356AF29C4F514D5D1FC9D9F2A861EEEE75841078774AD3777823E
CA1BA2E12F070D226E623EA6F116A885BFBC361C21D9FF194E0DD0E4CF921EEF
996E02DFA5C7795F41F18DDF9CB02AED4394D841E8A8C60BA7942F0A811E62F8
2B8CD8FAEEF738E454B4834F27463F8837842D5266010987E12E3A3CC19D37E8
A29BBE46522AFFE2E6C5210B1701A96758F7B18E7114CE9B28154DE6C085867B
03C0C307FA72F90EF0AB5A3DA15EE5EE3F36B61C85557FBFE7FAC515EA00C5F7
C8EBE9CAF5EE00724BE7B206AC205A599E664B0CEFF656EB5C0B71264C22C7D1
A353EFEA9666E9771B663AE8F70236FCEDAD4B247E6C1A1A8E93201206DD72D2
92D3E410503E54D2002055EFDA488E22753FAEFEE235176A> |
9693 <001C60D8A8C9B5EE310DDA30BF3EE89811D0430E311D92D36A7D90E654
54FB3898FF11650137AA591BC6A7A4B536DAD43C3B374C910A8D82E347EB92B3
5F63B7D7066D766F12123F904D7CD8FB3F222D78C454B8BF7747B85BC82D4E88
5334FA62311035DA7245530795A8547168CB3BD36ECF90C254993B195BB8D4EA
F3FEC3C5D1589030AB0A5562A9145605581DEE6499F507F1020E5722A0281F92
9AF62716FEB087C32F0E0342FD1A21676622DEEE5AD9408F320AF41C9ABE6664> |
572 <001C60D8A8C9B5EE310DE440651B03219120B25474DE3ED7A0DB5F61DAF
92FD401B834FF178228BE3EC6BF579E516E3566FD3AD70F4F4AE2C99C01FF1F8
ADA8756E9E24E1DC07241477DFB> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /XQFBYM+DengXian-GBK-EUC-H-Identity-H /Identity-H 0 [/XQFBYM+DengXian-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/XQFBYM+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
20.517 266.989 mo
(2\006\035\343ip!\247E\203!\237_\036%g\034\377Q+!\005\0359\035\010\(&Kz2\006\035\343o\023Z\372"\3254o2mo\023Z\240J\2264o2mo\017\035,d\363M\3226\233\002;5\377M\307M\3226\233o\020\002;4o2m \230%\335\002<)sh
%ADOBeginSubsetFont: XQFBYM+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XQFBYM+DengXian-GBK-EUC-H 10 GetGlyphDirectory
11858 <001C60D8A8C9B5EE310DD67710FA4584835AD702429918AF20E2EE4AC
666A2B8A01F551EF279EE7F693694C04F31F3C044D6C22470B2139AFD6654234
89E52544739BC2A0415D20732B749183EE18A1BC544F87473E9B289C836622C6
2A902444C121F6BA6137A7FFFA8A4EC58024C231BF6B5182FD5F182E57F940DB
AE6072D2B05E97B12F9A6C177C0E713FB2CBB10598CDB4A515F2ED236D532629
3B87FCD24418D6F051D0F93368690EEC0B171A3C7DE35DAE55489D9CE1FA94A8
CF9CE17C9E9912964DE0A52B01C18E1476421E09C88D00027834A796959707D1
F5581617DE9AAA24D6F31F5E5A7EE93CC> |
8441 <001C60D8A8C9B5EE310D544C3A1C05372AFE26DE493A8EDD6296C020E2
69964344DD7E9FD7A9280142A468B2F880DB72ADFDF5EDE59949B1E8AC9C975C
81DCACB408D3F9EABD72C3B34ABFEFD97F563A3BA798D94B7E2AAC0FEDBB7EDD
145F2626AA19E8975680C98892FA7B56AA946414860A5968B00227C3834BDF60
16A2140F718B8E4794AFBB341B934BDE063173E68ADC30D040BFBC45C6D4AF68
0C4B8054621204ABAAAA0A528233447C2ABFFB94B692BE430C25585420B2E6C6
814EBE3FDF6C23765784973CA8CEA0D03FDC0F70A090CBF38020E57390B02DFB
630B7B2EB1DEA0D3B59A6A66A4F1F8AF606428AD42D013AFDB1CE7BC864D3E1D
88AB2124C270802B2EE0D25DCE0BD4B989E2FACDFFCD82DF604B5F438303E83D
ED700E63> |
7498 <001C60D8A8C9B5EE310D89A5EB5AC395E17DC4F4C38314C86B977CC614
981D4CB5FF1EE0E3D843E99C014D578DB74CF906689A64AAF39A7E8B7D91800C
290440E154BB65CE2D49CAF3E47C3CE558AC7D9EE8E172EAD14D50642A40C7C0
04FCB208D08D74D87BF24A2DD4151C23C9AA289EE99F682EA9BF4B79A086B011
F3B6FBBADAB6EBB1897A314355B3AE2B051F85F5BBFB671D6007866DEAACDEC4
1EB99153496A8A0BA136475BD10A626942B1B4245D06EBFD> |
8973 <001C60D8A8C9B5EE310D06E4D22DBE98A1FE2F2928133747EC42742620
8CBF767FE8803CDF3EE12E5FEC273C20D3EF22691B17F4A24B3F0F6E8AE67C29
8175DAB03FD3B235AF250C85DAA94ABF8ECC6240D319AB6263445F4FF4DDFCCF
9E60DDAFBFD71AA809D12690BC0A05AC74A9951FFE439EAD1899B34CE684C006
506D5F5C517EA34F02C257D2244688FE0CF5B87450B301A2A3C9CE2473BAB0D5
453E6A4DA3CB3D8CD47A7B3F9DA01DC6EA7A9CD98A5D5D0AD837BD6020F8DDD1
1EB8DF205076482686C6C722DF58C1C439F76E4BA57E5F4F0C9DDF8412BF7713
74679D8FABDD27DEA2CC0454A0681741C0D9A6A360C3E64E51> |
13832 <001C60D8A8C9B5EE310D0752CF9EA0A02C0CF152C8198D4E6A62C327B
943401D7670C10FE73F68150AF149479989B74D6C70A8479F842E10F421F95B7
EF0597022B537F2975A9FCE7F0AD0A67844804B7513438C03902D689D8FE23FA
03EB6BAC06B144502B57A638BF6BD660CA6B67BF9D642762E0949912D1E688E1
2DC09CB414B2480C48AD9CA779C715F76ED6DCFD8FAE43C3FDC28B6E9797A82E
E95A43801705A0915834F00B01FA4849ECEC91DD6453F0A5E52C483B04D59041
C09C7191014654FAEAF004629C0CCA3E85F6E7EADCDA32D72F038B817C2978F9
970A7AA2CEB6B064620D1096909F59D44F2B39B1742D230E936EDCD08FA> |
7459 <001C60D8A8C9B5EE3103DDD4FDC0501C9EFD54BB9A82D9AC085FD45386
F852ADEFD0B2820A49D08BAA1B6ECBDFC5AD1B7EE7CC2FDF74CDFDFD06C2082B
CBED7E9D4CEA91532A95FE8D41EC4C9DECC607990F76CBC26671998E93738B37
2B88D6DACCB3FE10AE9BEFE89CADEFF2F6F3E2D85206F6B6EF99AED786A6C9C2
112C68CB798EA32C78746321AB0933CB57EAAC424959D0676ED435A56674918A
F00FF3BAA5794938DA8DC31FB5BA6A5F96EEBC17BEA0AC484259C34C8C8F2A6E
401DDD464AD5967ECE9C1529D2EAD09F727603EC447AAAB07E755CC05877BA30
5CD96882D7202BA64FF7B585BAF0A0380A93A495091682397AF0802DE5E4FDA5
1FDA7002E60D1D7455FEF28F8BC4DD5406F9AD26EA3C95731F04EA1527313A30
AD4F5E3AE7A1E0A6037FD64812ED6180DD2E68C45F3C8BE3086A4A45F72C9BCD
D743D97B8AE9E812B6B1B2E62861C7> |
18636 <001C60D8A8C9B5EE3100A4914863DD9E9F2973333667400FCF98FBAD4
DFEE7A634F8FF842E11E45C13DF923807B817D8ACB63E6E4ECBCEAB330DEDBD0
87B98CC979DD8EC72C01C928B081F16714D5BBA9015558685063D12CC2F63BC0
41DC1EA844D83F42ECACECD1B9388F42E705C2AA6EC1C07903FBA311EB49482E
FB6FB1A7C02B61D440A9AE0FC8089B79E9C5AD66E2289E5E20021C794CF06D7B
8968892B4B0662FA7EF15EA0F8D2435EFA8F9FBC25D396C5699976D061B7141F
3C483920733EDC4F90F2571B596DB917600E85C57F263A43A98DA9E5B5CD01F1
758F49BF298D8A64B203CA5887F10BD7D0B39507888DFB5596CF7D36CC02CB17
ED75A612E5FF12EC9B5316E88DB14BD84BAFA38304AE93E5093BDFA14A70E19D
3D8C244729C365B2AF9330C875F363F7DACCD4D869DD7674D909E12D9B40CB6A
83BCFCFAC65A21FF4C44BA6BD12931DAE88F647610FB5A21D5C043633D177590
037A5CFEF96D1D9FAD769A79D7402680C4971E863F71EC3548756B465C5398A2
9> |
13496 <001C60D8A8C9B5EE310D16461C93CC1F4B31D552CB02AB0114843A7C5
2A23CDCB273906E6ED66E9B4564CEA6B8D980DFFD0E46E4D04C72213CEEB90D9
9F35BCCCE9165C3B83C7FA02872473112B94251EDC56A9946FB98BC6A9724F71
D0C582D4739CF51FD4BB0D3116719696BC389629DB0EC055488F4625F78603C2
4D7445D462B037EED4DAE17821F07849125FDDF2A146E305D46607FAB8920C77
28993B06FE0E8EF5D40BBB53943E07A428D822235BABDCF030FF594742025E90
60144CBC5D55B5409A285E3CEC5E64C1111> |
11790 <001C60D8A8C9B5EE313BDF321EDFBD311EC395E5CA26C9337B1BC4623
1BFEC8774A89C7D81FD6DCBB12C7220679B01394A014490DE78B119165153CBB
947C306A0296476EC6D989172C6C9A4F4EEA2A170E78631C79DACB8E4F46F40B
93BEDA36000A42BA5610BE77D5098B7DEB2128F9B78AFE5D47B1DA8F4F180716
78FFFDFB2CB292CC2C15EB3DC46386F10829C7DBCF130F2FD3B332A72F28E9D0
6DE7DA52D414F8866D321A362F4922CE2E948536C2851141DD9C3AD696E1913A
AF28BBADEA8980BF07AA96F59AC73DAB8CF11ACF828A09DA7D53247076EB6551
CA60CB81C6736EE7975DFFE0039A1D099AB0CFC2E975D2599474587A9C05277D
73423A30A69CA51EF1C1573F5A90CEA36DE49087760B1AA74874E96> |
28449 <001C60D8A8C9B5EE310D8BED2F47822674726410D51AA56174CE223C5
85F0ECC82C2DDECACD2A4BEF9097B3B86B4EE2E5BA7D52865C4BF514B504AC00
C28BB6ABEF1D990C32EA726CE92926FDAFF52F06B5CA8556F2939734059CAB71
3AA3C26B2DB97B2BE824A21A5B9795D85983A3B1626563209C2F21D89296AE20
4FAB9DBE8FBA7C7> |
!
end
end end
%ADOEndSubsetFont
/XQFBYM+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
20.517 288.589 mo
(.RZ\240J\226 \371M\3226\233\035J#\015o\0236\010\035#H\3144o2m \230%\3354\270.\016o!)sh
%ADOBeginSubsetFont: XQFBYL+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XQFBYL+DengXian-GBK-EUC-H 1 GetGlyphDirectory
28609 <001C60D8A8C9B89100E29405032CF540B228E72552> |
!
end
end end
%ADOEndSubsetFont
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
362.537 288.589 mo
(o\304o\301o\263)
[9.48587 3.94189 0 ]xsh
%ADOBeginSubsetFont: XQFBYM+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XQFBYM+DengXian-GBK-EUC-H 3 GetGlyphDirectory
18890 <001C60D8A8C9B5EE31029C4628797623AD1F03A2AA335E00596F6FB94
56D8B4D55BA131F826CEF007CBC4A644CFD84A9981359EBE2AD4FD41B1C7D9A9
36A7DCCD78B57A3A76369DEB384E5F32EEC073B3941A7480841641E9811A3B35
868D251623BF5C9DECE4560277E5A4E510660CCEF5BE11565E709ED50C2DC0D1
45E129A4A48CBB2BB3AA87D657EB682FB1FBE999BC19E4852E5A6D434151B0E0
30CD67E08FCD50A56719DF9787EB518DD02D87CE48002C282BA6A3B4D5A557B6
85405B64F25> |
8818 <001C60D8A8C9B5EE310D01374C21BBA99E5DD7C77A76D331E3A04D1E4C
4BC9D0F5E9A1DDDB55A4ECBAA10B6EA9E69B9EDEBBCB6616F257F295F192CF6C
63D14A150E15354945CD8BAC90CFEE48D36F57DB377FBAB86232EF9592F9665B
5CD7BAB1392F5E5002EF5F4AC23BA4F722989D24C0C730B537E19EE585680EE0
B49522ACDA828EAD8F9F774053B5531C6412FEF8E05B53BF4EB596FA316CD61A
EEDB30163F7DEB2570667AF7BEDAAE60332E87E683A4A2E7872CF213E852C0B4
194CE676223738FA88A58D57A987BDCB60D3B6C4441B4AE2D7A73276C1F34634
50724E89F4E7ACBC1F1494680AF46E75616C5DB4268B7F2BC1927E6B85348844
273CA2525056622888A743> |
11493 <001C60D8A8C9B5EE310D0D2F18A22BC3B5B4C883F7F279872948ECF37
E89755152FDE1CA52BB949C04686243A237CE5F5C7C90547216C578092A3DD33
73A2A7119387189EB328C787B35DE23B6A6000B36F72C5083B8930F1A0085D94
84E60895F068CEABABC3673D4694BD54A13BCEF6C8A668B94A6BD00574CE243F
C9F759DF10D5E2633096A5B8B557BB9212A9CA5F344C59D416AE662D971EE763
56015CF0EDECDB878D6096CA9C15FED50B2C73C9DBFA507751E5E6933C7CFE54
4512F710A871601F020C82A659A1A126CA35C14BB> |
!
end
end end
%ADOEndSubsetFont
/XQFBYM+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
380.897 288.589 mo
(I\312"r \230%\335o\017,\345o\020\002<)sh
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
524.897 288.589 mo
(o\305o\301o\263o\325o\364p\007o\366o\373)
[9.4859 3.94189 4.96802 10.0621 9.01813 5.72388 8.15405 0 ]xsh
%ADOBeginSubsetFont: XQFBYM+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XQFBYM+DengXian-GBK-EUC-H 1 GetGlyphDirectory
8946 <001C60D8A8C9B5EE3140DA9EE503C7EEE3196B1DC724A0B33436F5C2BD
57195B4F4A31E91C3C2C6501A9F73D6164AC1430394197931BC5283A2EA04054
DE99ECE91F3C6F642EC3FD19CF4BC574DA1A3B7EC1B827B051F9F6F876F3FBEC
9BA1DDDB1DE0612FC0D084A10839F375D81BADD203DDDCFDA3055B0CD1742C38
B0FA8845D2F87F84CBADDFEF2301795755F9A6CD9F6C5A154C3522E97B598BB4
B97B846124F31C0704E5F056890F4E1A9B0ED9B55DA3E4C26EAB1998B3E951B3
F20FE55A41C3D41F4405E71E9195> |
!
end
end end
%ADOEndSubsetFont
/XQFBYM+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
586.157 288.589 mo
(o\017"\362o\020\002<)
[18.0201 18.02 18.02 0 ]xsh
%ADOBeginSubsetFont: XQFBYM+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XQFBYM+DengXian-GBK-EUC-H 6 GetGlyphDirectory
13535 <001C60D8A8C9B5EE3125920D99092050316FB4BDD7BC5314E4977FA63
997314E79D39D20D131D4CA7E136BC70AADA230CA8E9F6C5FD0B8FAF97551271
AED227A57091488EB18D39592E4FDADA5E4C23E8DF6B8D2F096572DC58EF401D
A2E056B2B9783FCF308ABCE96D77D2D2FA6DD4F05FCA54FDA829A14E369B386F
40AD89C94035F51E8CB375006A486180C7F23B14B855BC5494AB9EB5A4535E23
64DC1DFA6E2829F553D04C6AA80D2553ABB2D79DA73B49098101AA9898060F7C
412E6A702F017CA85676AA570E0E4AFE23530CC8C0ACBC1AFEFC605C653570E4
A58> |
23225 <001C60D8A8C9B5EE310D7343ADA454CF6FFE87B685730FAA02C8EFF19
5D6CFC92A3A61992D6B1C830E5197312E9D5DD3CFC67FED92B8D462C9FCB0B10
FBBC5A7C8DB323BEF65408476C20A43DFE8B12C2DCEF3086325A40D260FF886A
FE97A92E204D5A85C5451727B66C4F4D25EA6BF2969D4BB132142E37FB7D50DB
49C97AD79F1C5EA12ACE8175225551AA221EB7DE3A6964B6CB02866D91BBAF1B
16C0F76F094CB3D3DC48B6A1D10D0A44728F5F4E2BA6F9D9D5F664F528C461F0
03BE5D22759E8861BF3FBD4BC75AB49D8ACEE86D3F2427C397C723F7F73B3E25
2A5A1368DCF4FC5FA2FFEA16771C850173CD83918DB39B173000AF6BAA7A38BD
099135A36CB7AF4BF74CC90F294551473F2F940849E34A387587A60CB3B4A39D
B836F1247164E9C0E872D9FA3CDD06239D8FA5F9F7EA95E9FDDF51E02EB87B7C
EDABAD8514138492774CE86040123034A207A4263844E0B6BB89989649800253
4985D5C03DB560105D7F764D2B9DDAA823A> |
13614 <001C60D8A8C9B5EE310D14D71FFBBCD8258762979E413F7E53733A658
8AE42DFED312990E4DD33124CFA6EE7EBC4D6BA2B294FC611276395D4B87DCE8
F2B4053246A0ED00B37AFE81ADEFC983B6858DF1AA6CC864958A04CBE1CECD7D
416678559050A4923BB6AE1C53BA249851B8FA3DE874AC580F16BA0F58530D74
2A8E50BBF1F4FDAA0F945179C9E16D6F6A2225D17A9B96FF51368FA119A3E90B
89E3E39925A188A99563967D6F01DAF9F83C50204D2497D55A15108773C5C078
F75FC49001FB54A32EE9888F56C76B3ECD7BF1BB8357979D54A625E539B7CBFB
557C2883AAF56C65F02D1238911E0D3BEFC5972940F4EA53100F4DC169B0B7F9
2DDBBFAB5ECF01FFBBEABB2EA8FFD8A6C306384A07775DF0B6350F591E8431DC
A1A7275CA32361D> |
9193 <001C60D8A8C9B5EE310D929A987D2B8D0F276B4ACE9838861E788D163A
3CAE64B790636823C7935B37F65E7BD2422E7EE5E63A1E2687D9715E3030095C
445E49435F4238CA281F604E468AA98AF398DB8530DAFD3776F3E80210C23CF4
828BB3F665C9E36EEC61796062A81A839F57CEEA8B97821618997F45CA300C7D
E27E05EBBCEFD703EAF6398BE1EA40D90278244EB14EA2688075CB92A4C8AA6C
4068A5DD948B7E957F24EE5E13E5925F9C6E83EE5D3485E5AA5B6218AEB29155
10F99536606E6470B3E7C31ABF997A809DED4E55427A6908D1E78B487B0564D9
7ACB5D295BD70167441B3BCEF03DEE2FE7416189F9CC2C164D734E2E6C6E7197
C310826BE5F834082CDC8B51F53E93C1B7ABDC227BE7117EAD2484ECD7444708
A1364DA375A4AD70F67CBCBDC6DF12EBA5C08CAD3794685F33CC2251524CEC5C
8F798EEFAB2FE18FB2B973003273D7EEAC0D29CE0E41AAA04B98692F3ADAA7AB
3F2DB2285160C2468EAD05D4E8C8AD68F43C45ECA5828B7EFA33799E9ACE4203
8C53CD546EE6BD1C4DB902B32653EE7C0D3CC220879D7B1FC14AB38BFE94BF5E
E4> |
23298 <001C60D8A8C9B5EE310DF81AC9961CA19866EA3516BE0C9A0EF126395
73185E7DA99A3AA31AF08A43C9F106F5B3B4E569A5D188CC948735300262B29E
DA969F38C58D185550D2EEB2C24EEB5B44DA210BF54346821BB04786E42D7C4F
005456EE4FFE5F0BE45D2C3821CE8731906391E2CC2722C94B1033BB8F5711BE
460EAACEC86902AAD27FEF72BD6D44976B2A9155FA0D882AC44CAC32655C9F80
637D0244D26471791D2BF8932DD9B3C983684C7F4B785D959BF801299F1E1781
B2B808D48F0FD40FA37A9EEEC6802B41B178665C6E04C8A764142D430A9E3DAA
82A9C0F2C38BDD3D9421B350CA3986066082371EBEA1F5F225C6684F26A2C259
7F10303BDC2567704264D6D8E9274F78026B6A05B0800A5EFC07313B4312F6BA
BE7C2BC6DD38615FC491CFA4DEC5E0D633B12C405C0B3E85F90E40B0BB939E1C
509B5E0BB280A17FBA5DC99298DB056FA3A960065C4CCADB613CCE6F5F321E59
3C908AC00923914E13ABB32D7B404E7BFD2EF9F0133027B3DB15FF21D0F0F30D
ED2DBADC1F930EA53EF16F4A93747B483FEBDB3793753A97C117A50BCB5277EC
7132C1D8977CD0E03309EBF332F6387DB8981A130BE1CAA64F3233E> |
11685 <001C60D8A8C9B5EE310D7F507EE45F0D4E576B9691BAFEEE5C701D670
FD01797803963B75245EAFF12CB1B485083C9E1711FBB65390101B58FF3B29BC
31B5D3CD1E0967E161768D8962C71F30731F0FE1CDF5ECD7A567A8E6FC25411E
83F4C4AEE4873F34601DC3EE5C9D787092021D56D77A7BC5C6BDBF4B3160AB89
E792B8B62593FCCF0BB7C9863BFE42955A5BE5CBB8F75ABFCA4A5CE3684B6390
B10116A6E10E06C8FEA3B5F2E86C0EFC1CCA1D92291EE2975EDC5014234825DE
C267B0D828514ACCDD03CF4EFFEDAF997C146AE39C7600ABCA8F5D1D6727B0E6
DD852773C28C3A2CF84841F3DD693D4212E404162772B23FBC30F62CF53950FA
400774DF76DF54E8856B856CE98AA1464431EE2A863305EE40DCE598ED6A976D
00340A609B441FE6CA2EB1B0F13C6492C0953D8255BC2D456AB663893BBA06D7
CBAE8D18D94E7F712638CD3E46F10756580C57CDD288DB70878ED7144A996E57
C775A45EA346D5230445888580CCAC29EAD28D3134934A8B232D723096B5154D
CF1BC69894148FD34A859A2C635EAE93A949E> |
!
end
end end
%ADOEndSubsetFont
/XQFBYM+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
20.517 310.189 mo
(4\337Z\2715.#\351H\314[\002-\2454\270.\016o\023)sh
%ADOBeginSubsetFont: XQFBYL+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XQFBYL+DengXian-GBK-EUC-H 1 GetGlyphDirectory
28681 <001C60D8A8C9B74969EE40BB25ABD91F8460DD23DB9B191A528027CD2
A43C92EB48C42770A0B496FFADA0F67DDBE4B6E31AA2489D103934A6C89> |
!
end
end end
%ADOEndSubsetFont
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
200.517 310.189 mo
(o\346o\364p\011o\370)
[9.25214 9.01813 8.38806 0 ]xsh
%ADOBeginSubsetFont: XQFBYM+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XQFBYM+DengXian-GBK-EUC-H 10 GetGlyphDirectory
24572 <001C60D8A8C9B5EE3113117F70C712A69E1570B4A4D777730217112BD
FCA1E56903D1B93E9FEB8134A31396BC5B560D1A47F26648A41E83930532E859
AD93042308591E6EE2C95C1198AFEDFE11B61C868767CBA27130D2EB520B5256
2B6194649848F48C7673542174D8A7B29BFFF42D8BD018C5CE1E2ECEA50F7EB2
52971025D20E5238CAB29D075687F2685D3705C862543BCC2FCD54705AE09910
F7ED9F1DFBA0D4781409B26266E6689D35E20C9849FD94E766C533969E386A5D
57826F82F142779A42B0879BCB8D1760D8D836B10FDCA3D4289B9D0112DE2CB7
86D023CAEB4E2832B37BD91BCD323EF5DEF05DDEC31C33FD6783004B21D9094D
D7023E83E89680D1D1942FC29EE7F77D4A4E4B5780D1856BCCFFD55D6BC67489
B5E534B88F5854DCA0ACA5D4B409CE8C3D759D9C2D40CF3C20A7AA5A2F5FD36C
FDA5E96BD971F6E5BD52F3F4698A228A7E99BE83A8FA600BB5BA2D1D2C044CF9
EE6708444F59F1A7E5E58C3EE8729FED2C8F350543EAE3FDAF2BC6CB44BF5539
1C544C4BD60E0C9D2B03EB9D9401601675EC08F4516C5FCD008EE24E634CA118
991D8390108E89F> |
11013 <001C60D8A8C9B5EE310D61C07165CA6EE68CAEA505DE2B796DA460532
CF5EF63D638F69E287525AC6DE3493A01A19CE8FD875197967F107C052433137
51FC02D1AE2533169AC44F15F27A68689BD5EF879F910897E00F564B87B35310
889A8C942E7D5121E623A85748766EA773E64C014FF8E240777EC6DAAB453FC9
87703586F281F348406C2C7DB3DDEBE18EC48103C5DD9F8A09C9E3E438E24276
2797987A167F0ECE8B15F29D38FEB14B5DBF5F6A9E29F3BF7E9E9809019E4594
6A7049E9B28361E56115CF63B6B7348BA460376D6D6A62EA8799E3B3862B2928
764642D890E7D7B0EDDA5C777576EF881EB6E98FB6FD1F20330ED454AB83F91A
247544C40A646885A10A06BDBFEB19F62125243CF1BF02EC173194676B6CE868
E5C361B5A33CB1DEAD1A84B9579C9E7DFEB9534F8EF0FB43E299E38730FD1324
3242AAE447302C9AE3EDD44E77614786FC7C0E7DC1AA41C7681D6DC1BDF29A6D
B45179EC4124507AA5E69EE326F7E79037B0CEB3B5F017E4873CA8494FF13F36
25CE6FF27D4A8F4D6D029C901E790FF79C6247BDDDF9BB37120C510B36D78A63
DA1934764AAEF7F01955064E4B9141595190D> |
11505 <001C60D8A8C9B5EE31035815D5C09BCD105EB6CABE65EBFAEEDB18F21
B414EF4B74764651F10A95B5FF4516C3A4DBE865801F83429997E261344EECD0
CDEF89A8666E960FD991E53950149FFE17E29C5F69CF084FDC433571087098BE
C5EDA429EED5A4A94186F4A42BD7867B27A2F00D4E2C701269769F09DD5C4C15
A02D245B14D37375E871BB086B36C51F09D3D15003CBC196957DBEB52A03A7AF
641156B7E936E5CF0C0373B83FCBBCC8E34D40A1B9884004FA9EA40D69DDCA98
3552A253C5F> |
19918 <001C60D8A8C9B5EE310DBD9FAA5A7C7CE6C4321D233DCEFD44703CF73
088185C36F58BFE70DDD507177331ACE1BBDA20CFDB97CB8E88768F2785E5AF1
6C17963E25C79CE2A05214DFC3AF14082EBA3F9B70BCBF7F0386A303BCCD2D75
856B44BFBF1AFA9C9656E58C4629A58A0D8045D8DDABCA23EE6E32DAE46EDD79
F7BD34A7697679CB272D270980DA0271EA5AE5D2704B4170162C11AE86DF25A5
D3592F7AC8741DB306CF3A3FD0E96999B1F953C65C4F85041804C446BF315433
272C2DD4B032CC6494313355EFD33A8A504766C67A7C123488169EDD30D03453
86BBCC875AE2F255825B4BDD899E35F4DC5BE01FA84D84DFF708CFFFDA982CDC
001C1C99A1383E6DA15D30FA2629A43DD4FF3ECE147DBB3FC1A033459CFB710D
9A11FCDE025848CD2834634B58319F1DC985CE00111ABC5BA68BA5C9521A8EC0
ED29C5E4D0BB206B56DBCB5625925E88074EACFBB88D3C6B78BDF39E6A90975E
5A2A620EE1DEC811878> |
10891 <001C60D8A8C9B5EE3100859013D32B00C9BBF50222355060F1D802F2B
D2C798BED8658DC388006AC14DE8055839BE0E429C57C5A5FF16831B62AFB2EF
E489A1684B81B31F9FF818FBDD499350B550D365079CF58F9FF86B0737255F40
D758B5EB248B80F2C99E51C37729BC79F381ABDC2AE7F2EC6B16D2049EA88AF2
0BCDA921F9B66928FCA8907825444C1F724A6A7FDF0A9088A8830F2115CB3735
DCD066717ADC6D7F7AE9FE075BEE09AD4F268D403C3A647C5939CC191BE1D102
F7F74C9E9E158F5E9F670ED8B8CA8DF3F605220EA4B095FD5B4342C57F9DF596
C6BF72B21D627730399E420200B1D427B8CB9947CDD7D80F64180FC1338F7759
FABAA3EA38BD8D6DF41187D9CFE5809AB4DFEFA6AD9534D7EC4FD8A37478B076
419E18CBF08574700C1EB5FCA52180589543946B90FB601114DD9493E64B3841
D9885> |
12559 <001C60D8A8C9B5EE3117DB87B7A587A34C4707F1BF48A23B81329C676
DA51B7E8E1A18049029A4BFF290697ECCE3F83ED96A78CF357361BD8F0BC0146
4685D7B055073117869525B2E098E44C52C8A351A37054E74083F2BBC1BA2A4B
1BB7F8A2826875817B0E362D67535AB61562AC18D67CCDAAEA6088CB91AF46B1
C06DC4F83B3E2D16E9007B9DA8E529F7F9A3BC56AF5D48D73772C6ADBFCF9D3F
A19CF8849B48955BAB77330D6DCAB74684E3CF84C90DFD21251E34467A5B4CE3
5E386922D88AB8C667B095470C8CC43AF35471F035A1D5B9A4058CD8F90F830A
A9F5E23AFC495F113115E3FE951D738E6AF0C891E3BBAA79AE904F897C27A59F
C436090E5CF0B2B4E2DF4404FC32831B90751D55A2B4B397DE64DE64D44CF016
ECA0915065A79A61C3ECC05AA51D4F70AA093FCD3A29F458E31328C95111EC40
3ABE000A47ECB31557267C26135517F11A15888E2CE4D289674345A9B9859A59
6309F2A4D64C72D14225E3F866D8C20C12CF6C68A> |
10839 <001C60D8A8C9B5EE310D09B63D8E9830DBE62E535A08B503DF51456F3
B43CEC9B4A73D2C7FAAA3BBED33ABC081F867DFBF34AC3317028CCA29952AC42
57ADDE7C257DE9F3722427D81F4DA0DECCEE839EE710EAC9B09A1014149DDEFA
87D739D0FD06E4B4F654D6F72F47C0E8D3D06F1301D13A6A3B21D35826DE6D2B
96A1B853F68EEAC7D6EA3CD6CD9B4B82B13FCBF426368AF8FE793156AB6AD7A5
C852D24C245ACBF010FD633B985BE8375EADC09DDE6119523178F04AFA2C53BA
4DD8E90584F207D5838BAEE61DA508555AEEF20B31B441584814C79E21330319
14E5C77EFB25BB081588DE8873BCD79E7D6B287479E03A2C2FFC10BA2FD8704F
A1687B864FD4230909F0E80AB00507DEEA7C6A87EC3FEF5FB0E743F51B081E58
B8E591D896BFA265D6C67972AC451129D4AD6> |
9767 <001C60D8A8C9B5EE3111BEAD497A81E9CD8E02A067AD21B3A1B103528B
6E6FF8652194045EE9C431380961F1AA7EDEBBDFDFD725FF8560C6CA80A693C2
0177DA8D134A80E129C3527591979459436F1B0432B06B09459720B4D8B44E5F
EED8567715E1280135D9838674883574382BB113D7BAE83A92F7987788EED254
120F65526F5DAABFFAE0F3F8E964ADA1ECBCBC6CBEC074A5F6F4761DD3F0A0C0
F4806D99534821B21AA86BA2464140A8802BE890DA979D6C3CA4D372DA39410E
6DC2417D3C678C1AF4C6278F37D5E3AEDAC1F3615BF5D0CE253106B3EA926907
E84C62AA8973B66BB62F8A482F2966D8ACD003EE95E700570994A30D3B110325
E8C12294D067A989A57D348F6240662F5550F2547E30D24AF5C81AB79E33F2B0
610A9DBE36109F8B5909AC51C2A451BB51038D3CFF7E3B> |
16710 <001C60D8A8C9B5EE310D13A905EE4EE896BEB161294F08724FF316931
287FC93F3464B6AE88D61A84B9BC8293AFE3FBCAF920604C78496011ED7AC962
CB0D2B26D5E986E9F478479F1D97A56DF2FC17CD4B0D83841375CC1FE5468157
8A62C0F577F982072AAED2D7504352A37F0C0B546EC1C073CCD5870B2460E8FC
8D6D483F0079699C371F1193EEBDF3C901B6981640866D8ACC51A334749FD205
912180B1A5CB5968E2AB3BFA7F784B14D4FFA778D78832283698349B34197C35
6FBE18ECA8E854789AB8ED919B3E9773A22C030C3182361AEBFBE8AB69E09> |
7433 <001C60D8A8C9B5EE310D358EDD1734B756EC703EB62F58CB539A59966C
71F6C42149247A08B679AAC67D28DABF03A0F30CD37C10220B416F9FC065BE54
B880BBF0BDAF6025A24394863BA21CEF58C74FB3F20161A9B75B8A1D50C297ED
00E02374F2AD8375E9307B9DA68A93F0C3D84CB1E123BC033C> |
!
end
end end
%ADOEndSubsetFont
/XQFBYM+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
236.397 310.189 mo
(2\006\035\343_\3745.+\005,\361M\316Z\240J\226*\2131\017o\023*W&'AF\035\011E\2035\377M\307M\3226\233 \230%\335)sh
%ADOBeginSubsetFont: XQFBYL+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XQFBYL+DengXian-GBK-EUC-H 1 GetGlyphDirectory
28645 <001C60D8A8C9B7FA1378253013ECBC2E2375A528708F98127351381D8
D6D4621D951E8F5F697D02315B161674B3B669EC72DC9FB775331F6348CFA7EA
DF53D1E65E2A1653259F1DF90BA621D0BA605DBDCF6462367C15F1F9BCD37860
53893E0E997109E5787E293F736D944B821F2A5> |
!
end
end end
%ADOEndSubsetFont
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
650.437 310.189 mo
(o\327o\327o\345)
[12.36 12.3601 0 ]xsh
/XQFBYM+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
685.537 310.189 mo
(\002<)sh
112.297 108.289 mo
112.297 54.9895 li
111.297 54.9895 li
111.297 108.289 li
cp
114.797 55.9895 mo
111.797 49.9895 li
108.797 55.9895 li
cp
.765011 .551873 0 0 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XQFBYL+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XQFBYL+DengXian-GBK-EUC-H 1 GetGlyphDirectory
28676 <001C60D8A8C9B7FD849FFB33A190BBBCCAB98A3FF3A15766A7C6031DE
4D0266652A6F79818870B61B135B5F3EC6EF415AC9A810D6CE9F402D905BBED3
2C041C4A6BD802AE756F3A54E3C898C3A5E51A516D49B1849FBD77C2A04985FB
547C8FED6BCDAA9A7CA3A2BF9C6F0E7D248F6462F432F0CFCBC9D26F1D18A548
C305F6F19780C22845C6F75CD51B6AA725DE17CD395D3CE2C0228040418CB68D
A8A1AE016BA892C15519C5B22DD5C510C6FCF69FFA26ACF> |
!
end
end end
%ADOEndSubsetFont
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
65.137 102.589 mo
(o\334p\001p\007o\370p\005p\005p\010p\003p\007o\263o\345o\370p\004p\010o\370p\006p\007)
[2.96393 6.60004 3.81592 6.16809 4.06805 4.09206 6.61194 6.88806 3.81592 3.43202 6.92395 6.16809 
6.88806 6.61194 6.16809 4.87207 0 ]xsh
581.377 108.289 mo
581.377 54.9895 li
580.377 54.9895 li
580.377 108.289 li
cp
583.877 55.9895 mo
580.877 49.9895 li
577.877 55.9895 li
cp
.765011 .551873 0 0 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
/XQFBYL+DengXian-GBK-EUC-H-Identity-H findfont [12 0 0 -12 0 0 ]msf
534.377 103.27 mo
(o\334p\001p\007o\370p\005p\005p\010p\003p\007o\263o\345o\370p\004p\010o\370p\006p\007)
[2.96393 6.60004 3.81592 6.16809 4.06805 4.09204 6.61194 6.88806 3.81592 3.43201 6.92395 6.16809 
6.88806 6.61194 6.16809 4.87207 0 ]xsh
gsave
-1.18299 338.889 mo
958.817 338.889 li
958.817 -201.111 li
-1.18299 -201.111 li
cp
eclp
-1.15299 -51.7405 mo
478.847 -51.7405 li
478.847 -162.501 li
-1.15299 -162.501 li
cp
.916228 .750088 .15668 .0255436 cmyk
@
grestore
gsave
-1.18296 338.889 mo
958.817 338.889 li
958.817 -201.111 li
-1.18296 -201.111 li
cp
eclp
478.847 -51.3205 mo
958.847 -51.3205 li
958.847 -162.5 li
478.847 -162.5 li
cp
.916228 .750088 .15668 .0255436 cmyk
@
grestore
gsave
-1.18299 338.889 mo
958.817 338.889 li
958.817 -201.111 li
-1.18299 -201.111 li
cp
eclp
-1.15299 114.52 mo
478.847 114.52 li
478.847 -1.7005 li
-1.15299 -1.7005 li
cp
.916228 .750088 .15668 .0255436 cmyk
@
grestore
gsave
-1.18296 338.889 mo
958.817 338.889 li
958.817 -201.111 li
-1.18296 -201.111 li
cp
eclp
478.847 114.52 mo
958.847 114.52 li
958.847 -1.7005 li
478.847 -1.7005 li
cp
.916228 .750088 .15668 .0255436 cmyk
@
grestore
228.617 112.689 mo
253.697 112.689 li
253.697 105.609 li
228.617 105.609 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XQFBYM+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XQFBYM+DengXian-GBK-EUC-H 1 GetGlyphDirectory
28694 <001C60D8A8C9B62E09DE67EB61250D9A06B79A926C16A2D37591A26AB
67078E700175B7B58EBB0E54E50> |
!
end
end end
%ADOEndSubsetFont
/XQFBYM+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
234.857 115.169 mo
(p\026)sh
.48 lw
232.177 103.27 mo
224.837 112.66 li
.765011 .551873 0 0 cmyk
@
258.157 103.27 mo
250.817 112.66 li
@
686.177 112.689 mo
711.197 112.689 li
711.197 105.609 li
686.177 105.609 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
/XQFBYM+DengXian-GBK-EUC-H-Identity-H findfont [18 0 0 -18 0 0 ]msf
692.417 115.169 mo
(p\026)sh
689.677 103.27 mo
682.337 112.66 li
.765011 .551873 0 0 cmyk
@
715.657 103.27 mo
708.317 112.66 li
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/XQFBYL+DengXian-GBK-EUC-H-Identity-H uf
/XQFBYL+DengXian-GBK-EUC-H /CIDFont ur
/XQFBYM+DengXian-GBK-EUC-H-Identity-H uf
/XQFBYM+DengXian-GBK-EUC-H /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
